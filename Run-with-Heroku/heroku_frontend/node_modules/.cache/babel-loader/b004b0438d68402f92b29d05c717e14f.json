{"ast":null,"code":"var _jsxFileName = \"/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_Editor/App_Editor.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './App_Editor.css';\nimport { Link } from 'react-router-dom'; // MUI \n\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport Slider from '@mui/material/Slider'; // Import constants\n\nimport * as GLOBAL_CONSTANTS from './../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from './LocalConstants'; // Components\n\nimport EditorPage from './App_EditorPage'; // Api functions\n\nimport getEditorPage from './Func_getEditorPage';\nimport addCartCanvas from './Func_addCartCanvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasAddToCartLoading: false,\n      // Main editor data with materials, styles, cutout images\n      editorData: null,\n      currentSelectedCutoutIndex: 1,\n      currentSelectedMaterialOptionIndex: 0,\n      currentSelectedStyleOptionIndex: 0,\n      longestSidePick: 0,\n      sizeSliderMin: 0,\n      sizeSliderMax: 0,\n      orderAmount: 1,\n      canvasPrice: 0,\n      canvasTotalPrice: 0,\n      //// Canvas\n      lineWidth: 50,\n      canvasMaxLength: 2000,\n      // Max pixel density per side\n      canvasWidth: 0,\n      canvasHeight: 0,\n      // Canvas element width-height will depend on cutout image\n      // and its aspect ratio and canvasElementMaxLength \n      canvasElementMaxLength: 600,\n      canvasElementWidth: 0,\n      canvasElementHeight: 0,\n      canvasPreviousPositionX: 0,\n      canvasPreviousPositionY: 0,\n      // Image canvas\n      uploadedImageURL: null,\n      imageCanvasRef: /*#__PURE__*/React.createRef(),\n      imageCanvasContext: null,\n      // EraserDeeraser canvas\n      eraserDeeraserCanvasRef: /*#__PURE__*/React.createRef(),\n      eraserDeeraserCanvasContext: null,\n      // PaintDepaint canvas\n      paintDepaintCanvasRef: /*#__PURE__*/React.createRef(),\n      paintDepaintCanvasContext: null,\n      paintDepaintCanvasColor: \"#E54B4B\",\n      //\n      currentCanvasDimensionWidth: 50,\n      currentCanvasDimensionHeight: 50,\n      currentCanvasColorBackground: \"#0000FF\",\n      longestImageDim: 0,\n      shortestCanvasDim: 0,\n      // Design image\n      image: new Image(),\n      imageLoaded: false,\n      imageWidth: 0,\n      // Pixel density\n      imageHeight: 0,\n      imageToOriginalImageScale: 0,\n      imageToCanvasScale: 1,\n      // Percentage (shortest image dim)/(longest canvas dim)\n      imagePositionX: 0,\n      imagePositionY: 0,\n      imageRotation: 0,\n      // Rotation in degrees\n      //// Tools\n      currentSelectedTool: LOCAL_CONSTANTS.CANVAS_TOOLS['MOVE_TOOL'],\n      currentSelectedToolState: LOCAL_CONSTANTS.MOVE_TOOL_STATES['INACTIVE'],\n      // Canvas events (empty functions by default)\n      canvasOnMouseMove: () => {\n        console.log(\"*** canvas on move empty\");\n      },\n      canvasOnMouseDown: () => {\n        console.log(\"*** canvas on down empty\");\n      },\n      canvasOnMouseUp: () => {\n        console.log(\"*** canvas on up empty\");\n      }\n    };\n    this.loadImage = this.loadImage.bind(this);\n    this.onChangeLongestSidePick = this.onChangeLongestSidePick.bind(this);\n    this.onChangeOrderAmount = this.onChangeOrderAmount.bind(this);\n    this.recalculatePrice = this.recalculatePrice.bind(this);\n    this.onImageUpload = this.onImageUpload.bind(this);\n    this.onAddCanvasToCart = this.onAddCanvasToCart.bind(this); //// Tools\n\n    this.onChangeTool = this.onChangeTool.bind(this); // Move tool;\n\n    this.moveToolOnMouseMove = this.moveToolOnMouseMove.bind(this);\n    this.moveToolOnMouseDown = this.moveToolOnMouseDown.bind(this);\n    this.moveToolOnMouseUp = this.moveToolOnMouseUp.bind(this); // Eraser tool\n\n    this.eraserDeeraserToolOnMouseMove = this.eraserDeeraserToolOnMouseMove.bind(this);\n    this.eraserDeeraserToolOnMouseDown = this.eraserDeeraserToolOnMouseDown.bind(this);\n    this.eraserDeeraserToolOnMouseUp = this.eraserDeeraserToolOnMouseUp.bind(this); // Eraser tool\n\n    this.paintDepaintToolOnMouseMove = this.paintDepaintToolOnMouseMove.bind(this);\n    this.paintDepaintToolOnMouseDown = this.paintDepaintToolOnMouseDown.bind(this);\n    this.paintDepaintToolOnMouseUp = this.paintDepaintToolOnMouseUp.bind(this);\n    this.changeCanvasBackground = this.changeCanvasBackground.bind(this);\n    this.changeBrushColor = this.changeBrushColor.bind(this);\n    this.onChangeLineWidth = this.onChangeLineWidth.bind(this);\n    this.onChangeImageScale = this.onChangeImageScale.bind(this); // Changing options\n\n    this.onCanvasCutoutChange = this.onCanvasCutoutChange.bind(this);\n    this.onCanvasMaterialChange = this.onCanvasMaterialChange.bind(this);\n    this.onCanvasStyleChange = this.onCanvasStyleChange.bind(this);\n  }\n\n  componentDidMount() {\n    // Initial api call for editor data + process cutouts + load image \n    this.onGetEditorPage(); // Set default canvas event listeners for current selected tool\n\n    this.setCurrentCanvasEventListeners();\n  }\n\n  assignCanvasContexts() {\n    this.setState({\n      imageCanvasContext: this.state.imageCanvasRef.current.getContext(\"2d\"),\n      eraserDeeraserCanvasContext: this.state.eraserDeeraserCanvasRef.current.getContext(\"2d\"),\n      paintDepaintCanvasContext: this.state.paintDepaintCanvasRef.current.getContext(\"2d\")\n    });\n  }\n\n  onGetEditorPage() {\n    // Use imported function core and add own functionality for this component\n    // Create scope variable to be used inside .then function\n    const scope = this; // Custom response function\n\n    getEditorPage().then(function (ret) {\n      // Update cart sticker list\n      if (ret.status == 200) {\n        // 200 OK status code\n        scope.setState({\n          editorData: ret.data\n        }, () => {\n          // Calculate size limits for canvas in mm for size slider\n          scope.recalculateCanvasLimits(); // Assign contexts to canvases\n\n          scope.assignCanvasContexts(); // Process cutout image on response\n\n          scope.processCutoutImage(); // Load image -> after -> initial dimensions, position and draw too\n          // scope.loadImage();\n        });\n      } else {\n        alert(\"Error with getting data for the editor, contact the maintainer\");\n      }\n    });\n  }\n\n  onAddCanvasToCart(canvasStyleOptionId, canvasCutoutOptionId, amount, longestSidePick, backgroundColor, imageCanvasContext, eraserDeeraserCanvasContext, paintDepaintCanvasContext) {\n    // Use api function core and add own functionality\n    // Create scope variable to be used inside .then function\n    const scope = this; // Custom response function\n\n    this.setState({\n      canvasAddToCartLoading: true\n    });\n    addCartCanvas(canvasStyleOptionId, canvasCutoutOptionId, amount, longestSidePick, backgroundColor, imageCanvasContext, eraserDeeraserCanvasContext, paintDepaintCanvasContext).then(function (ret) {\n      scope.setState({\n        canvasAddToCartLoading: false\n      });\n\n      if (ret.status == 200) {\n        // 200 OK status code\n        scope.props.updateCartStickers();\n        alert(\"Canvas has been added to your cart\");\n      } else {\n        alert(\"There has been an error with status code \" + ret.status + \". Try again, if the problem persists, please contact the maintainer.\");\n      }\n    });\n  }\n\n  processCutoutImage() {\n    // Process cutout image and assign canvases heights/widths accordingly\n    var currentSelectedCutoutIndex = this.state.currentSelectedCutoutIndex;\n    var currentSelectedCutoutAspectRatio = this.state.editorData.cutout_options[currentSelectedCutoutIndex].img_aspect_ratio;\n\n    if (currentSelectedCutoutAspectRatio >= 1.0) {\n      this.setState({\n        canvasWidth: this.state.canvasMaxLength,\n        canvasHeight: this.state.canvasMaxLength * (1 / currentSelectedCutoutAspectRatio),\n        canvasElementWidth: this.state.canvasElementMaxLength,\n        canvasElementHeight: this.state.canvasElementMaxLength * (1 / currentSelectedCutoutAspectRatio)\n      });\n    } else if (currentSelectedCutoutAspectRatio < 1.0) {\n      this.setState({\n        canvasWidth: this.state.canvasMaxLength * currentSelectedCutoutAspectRatio,\n        canvasHeight: this.state.canvasMaxLength,\n        canvasElementWidth: this.state.canvasElementMaxLength * currentSelectedCutoutAspectRatio,\n        canvasElementHeight: this.state.canvasElementMaxLength\n      });\n    }\n  }\n\n  loadImage() {\n    // Load image\n    if (this.state.uploadedImageURL) {\n      this.state.image.src = this.state.uploadedImageURL; // Set callback function on loading sticker image\n\n      const scope = this;\n\n      this.state.image.onload = function () {\n        scope.setState({\n          imageLoaded: true\n        }); // Set initial image dimensions, position and draw\n\n        scope.initialImageDimensionsPosition();\n      };\n    }\n  }\n\n  initialImageDimensionsPosition() {\n    // Find the longest dimension of the image and scale the other dimension so that \n    // the image can fit the canvas, get the smallest dimension of the canvas too\n    var longestImageDim = Math.max(this.state.image.width, this.state.image.height);\n    var shortestCanvasDim = Math.min(this.state.canvasWidth, this.state.canvasHeight);\n    this.setState({\n      longestImageDim: longestImageDim,\n      shortestCanvasDim: shortestCanvasDim\n    });\n    var scale = this.state.imageToCanvasScale * (shortestCanvasDim / longestImageDim); // Set new image dimensions\n\n    var new_image_w = Math.round(this.state.image.width * scale);\n    var new_image_h = Math.round(this.state.image.height * scale);\n    this.setState({\n      imageToOriginalImageScale: scale,\n      // Set new dimension\n      imageWidth: new_image_w,\n      imageHeight: new_image_h,\n      // Set new center position\n      imagePositionX: Math.round(this.state.canvasWidth / 2) - Math.ceil(new_image_w / 2),\n      imagePositionY: Math.round(this.state.canvasHeight / 2) - Math.ceil(new_image_h / 2)\n    }); // Clear canvas and redraw the image\n\n    this.clearCanvas();\n    this.redrawImageOnCanvas();\n  }\n\n  clearCanvas() {\n    // Make canvas empty\n    // this.state.imageCanvasContext.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    this.state.imageCanvasContext.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n  }\n\n  redrawImageOnCanvas() {\n    // Draw uploaded image\n    this.state.imageCanvasContext.globalCompositeOperation = \"source-over\";\n    this.state.imageCanvasContext.drawImage(this.state.image, this.state.imagePositionX, this.state.imagePositionY, this.state.imageWidth, this.state.imageHeight); // Use eraser canvas to remove pixels from the sticker image\n\n    this.state.imageCanvasContext.globalCompositeOperation = \"destination-out\";\n    this.state.imageCanvasContext.drawImage(this.state.eraserDeeraserCanvasContext.canvas, this.state.imagePositionX, this.state.imagePositionY, Math.round(this.state.canvasWidth * this.state.imageToCanvasScale), Math.round(this.state.canvasHeight * this.state.imageToCanvasScale));\n    this.state.imageCanvasContext.globalCompositeOperation = \"source-over\";\n    this.state.imageCanvasContext.drawImage(this.state.paintDepaintCanvasContext.canvas, 0, 0, this.state.canvasWidth, this.state.canvasHeight);\n  }\n\n  onChangeImageScale(imageToCanvasScale) {\n    // Set scales\n    var imageToOriginalImageScale = imageToCanvasScale * (this.state.shortestCanvasDim / this.state.longestImageDim);\n    this.setState({\n      imageToCanvasScale: imageToCanvasScale,\n      imageToOriginalImageScale: imageToOriginalImageScale\n    }, () => {\n      // Set new image dimensions\n      this.setState({\n        imageWidth: Math.round(this.state.image.width * imageToOriginalImageScale),\n        imageHeight: Math.round(this.state.image.height * imageToOriginalImageScale)\n      }, () => {\n        this.clearCanvas();\n        this.redrawImageOnCanvas();\n      });\n    });\n  } // TOOLS //\n  // Move tool:\n  // Moving the image on the canvas will work so that after clicking\n  // we are in the state to move/redraw the image on every move and thus adding \n  // event listener on mousemove. On mouse up we will remove the event listener\n\n\n  moveToolOnMouseDown(event) {\n    // Activate the move tool\n    this.setState({\n      currentSelectedToolState: LOCAL_CONSTANTS.MOVE_TOOL_STATES['ACTIVE']\n    }, () => {\n      this.setCurrentCanvasEventListeners();\n    });\n  }\n\n  moveToolOnMouseMove(event) {\n    var trueCanvasPosition = this.getTrueCanvasPosition(event);\n    var x = trueCanvasPosition[0];\n    var y = trueCanvasPosition[1]; // console.log('move: x: ' + x + ',y: ' + y);\n\n    this.setState({\n      // Center image position\n      imagePositionX: x - Math.round(this.state.imageWidth / 2),\n      imagePositionY: y - Math.round(this.state.imageHeight / 2)\n    }, () => {\n      this.clearCanvas();\n      this.redrawImageOnCanvas();\n    });\n  }\n\n  moveToolOnMouseUp() {\n    // Deactivate the move tool\n    this.setState({\n      currentSelectedToolState: LOCAL_CONSTANTS.MOVE_TOOL_STATES['INACTIVE']\n    }, () => {\n      this.setCurrentCanvasEventListeners();\n    });\n  } // Eraser + deeraser tool:\n\n\n  eraserDeeraserToolOnMouseDown(event) {\n    var trueFollowingDrawCanvasPosition = this.getTrueFollowingDrawCanvasPosition(event);\n    var x = trueFollowingDrawCanvasPosition[0];\n    var y = trueFollowingDrawCanvasPosition[1]; // Eraser vs Deeraser\n\n    if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['ERASER_TOOL']) {\n      this.drawLineToCanvas(this.state.eraserDeeraserCanvasContext, [x, y], [x, y], \"source-over\", \"rgba(0,0,0,1)\", this.state.lineWidth);\n    } else if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEERASER_TOOL']) {\n      this.drawLineToCanvas(this.state.eraserDeeraserCanvasContext, [x, y], [x, y], \"destination-out\", \"rgba(0,0,0,1)\", this.state.lineWidth);\n    }\n\n    this.redrawImageOnCanvas(); // Activate eraser/deeraser, save previous position, set events to canvas\n\n    this.setState({\n      currentSelectedToolState: LOCAL_CONSTANTS.ERASER_DEERASER_TOOL_STATES['ACTIVE'],\n      canvasPreviousPositionX: x,\n      canvasPreviousPositionY: y\n    }, () => {\n      this.setCurrentCanvasEventListeners();\n    });\n  }\n\n  eraserDeeraserToolOnMouseMove(event) {\n    if (this.state.currentSelectedToolState == LOCAL_CONSTANTS.ERASER_DEERASER_TOOL_STATES['ACTIVE']) {\n      var trueFollowingDrawCanvasPosition = this.getTrueFollowingDrawCanvasPosition(event);\n      var x = trueFollowingDrawCanvasPosition[0]; // - scaled image/drawcanvas \n\n      var y = trueFollowingDrawCanvasPosition[1]; // Draw with Eraser vs Deeraser\n\n      if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['ERASER_TOOL']) {\n        this.drawLineToCanvas(this.state.eraserDeeraserCanvasContext, [this.state.canvasPreviousPositionX, this.state.canvasPreviousPositionY], [x, y], \"source-over\", \"rgba(0,0,0,1)\", this.state.lineWidth);\n      } else if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEERASER_TOOL']) {\n        this.drawLineToCanvas(this.state.eraserDeeraserCanvasContext, [this.state.canvasPreviousPositionX, this.state.canvasPreviousPositionY], [x, y], \"destination-out\", \"rgba(0,0,0,1)\", this.state.lineWidth);\n      }\n\n      this.clearCanvas();\n      this.redrawImageOnCanvas(); // Save previous position\n\n      this.setState({\n        canvasPreviousPositionX: x,\n        canvasPreviousPositionY: y\n      });\n    } else if (this.state.currentSelectedToolState == LOCAL_CONSTANTS.ERASER_DEERASER_TOOL_STATES['INACTIVE']) {\n      // Canvas real position is different because element dimensions are different\n      var trueCanvasPosition = this.getTrueCanvasPosition(event);\n      var x = trueCanvasPosition[0];\n      var y = trueCanvasPosition[1];\n      this.clearCanvas();\n      this.redrawImageOnCanvas();\n      this.drawLineToCanvas(this.state.imageCanvasContext, [x, y], [x, y], \"source-over\", \"rgba(255,0,0,0.5)\", this.state.lineWidth * this.state.imageToCanvasScale);\n    }\n  }\n\n  eraserDeeraserToolOnMouseUp() {\n    // Deactivate the eraser tool and set canvas event listeners\n    this.setState({\n      currentSelectedToolState: LOCAL_CONSTANTS.ERASER_DEERASER_TOOL_STATES['INACTIVE']\n    }, () => {\n      this.setCurrentCanvasEventListeners();\n    });\n  } // Paint + Depaint tool:\n\n\n  paintDepaintToolOnMouseDown(event) {\n    var trueCanvasPosition = this.getTrueCanvasPosition(event);\n    var x = trueCanvasPosition[0];\n    var y = trueCanvasPosition[1]; // Paint vs Depaint\n\n    if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['PAINT_TOOL']) {\n      this.drawLineToCanvas(this.state.paintDepaintCanvasContext, [x, y], [x, y], \"source-over\", this.state.paintDepaintCanvasColor, this.state.lineWidth);\n    } else if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEPAINT_TOOL']) {\n      this.drawLineToCanvas(this.state.paintDepaintCanvasContext, [x, y], [x, y], \"destination-out\", \"rgba(0,0,0,1)\", this.state.lineWidth);\n    }\n\n    this.redrawImageOnCanvas(); // Activate paint/depaint, save previous position, set events to canvas\n\n    this.setState({\n      currentSelectedToolState: LOCAL_CONSTANTS.PAINT_DEPAINT_TOOL_STATES['ACTIVE'],\n      canvasPreviousPositionX: x,\n      canvasPreviousPositionY: y\n    }, () => {\n      this.setCurrentCanvasEventListeners();\n    });\n  }\n\n  paintDepaintToolOnMouseMove(event) {\n    if (this.state.currentSelectedToolState == LOCAL_CONSTANTS.PAINT_DEPAINT_TOOL_STATES['ACTIVE']) {\n      var trueCanvasPosition = this.getTrueCanvasPosition(event);\n      var x = trueCanvasPosition[0];\n      var y = trueCanvasPosition[1]; // Draw with Paint vs Depaint\n\n      if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['PAINT_TOOL']) {\n        this.drawLineToCanvas(this.state.paintDepaintCanvasContext, [this.state.canvasPreviousPositionX, this.state.canvasPreviousPositionY], [x, y], \"source-over\", this.state.paintDepaintCanvasColor, this.state.lineWidth);\n      } else if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEPAINT_TOOL']) {\n        this.drawLineToCanvas(this.state.paintDepaintCanvasContext, [this.state.canvasPreviousPositionX, this.state.canvasPreviousPositionY], [x, y], \"destination-out\", \"rgba(0,0,0,1)\", this.state.lineWidth);\n      }\n\n      this.clearCanvas();\n      this.redrawImageOnCanvas(); // Save previous position\n\n      this.setState({\n        canvasPreviousPositionX: x,\n        canvasPreviousPositionY: y\n      });\n    } else if (this.state.currentSelectedToolState == LOCAL_CONSTANTS.PAINT_DEPAINT_TOOL_STATES['INACTIVE']) {\n      // Canvas real position is different because element dimensions are different\n      var trueCanvasPosition = this.getTrueCanvasPosition(event);\n      var x = trueCanvasPosition[0];\n      var y = trueCanvasPosition[1];\n      this.clearCanvas();\n      this.redrawImageOnCanvas();\n      this.drawLineToCanvas(this.state.imageCanvasContext, [x, y], [x, y], \"source-over\", \"rgba(255,0,0,0.5)\", this.state.lineWidth);\n    }\n  }\n\n  changeBrushColor(event) {\n    this.setState({\n      paintDepaintCanvasColor: event.target.value\n    });\n  }\n\n  paintDepaintToolOnMouseUp() {\n    // Deactivate the eraser tool and set canvas event listeners\n    this.setState({\n      currentSelectedToolState: LOCAL_CONSTANTS.PAINT_DEPAINT_TOOL_STATES['INACTIVE']\n    }, () => {\n      this.setCurrentCanvasEventListeners();\n    });\n  }\n\n  getTrueCanvasPosition(event) {\n    // Canvas element has different 'real' displayed resolution than the internal one\n    var rect = event.currentTarget.getBoundingClientRect(); // Canvas real position is different because element is different\n\n    var scale_x = this.state.canvasWidth / this.state.canvasElementWidth;\n    var scale_y = this.state.canvasHeight / this.state.canvasElementHeight;\n    var x = scale_x * (event.clientX - rect.left);\n    var y = scale_y * (event.clientY - rect.top);\n    return [x, y];\n  }\n\n  getTrueFollowingDrawCanvasPosition(event) {\n    // Get position on the drawing canvas so that it will overlap image\n    // even though it is scaled to cover the image (with aspect ratio 1) \n    var trueCanvasPosition = this.getTrueCanvasPosition(event);\n    var x = (trueCanvasPosition[0] - this.state.imagePositionX) * (1 / this.state.imageToCanvasScale);\n    var y = (trueCanvasPosition[1] - this.state.imagePositionY) * (1 / this.state.imageToCanvasScale);\n    return [x, y];\n  }\n\n  drawLineToCanvas(canvasContext, fromXY, whereXY, globalCompositeOperation, color, lineWidth) {\n    canvasContext.beginPath();\n    canvasContext.globalCompositeOperation = globalCompositeOperation;\n    canvasContext.strokeStyle = color;\n    canvasContext.lineCap = \"round\";\n    canvasContext.lineJoin = \"round\";\n    canvasContext.lineWidth = lineWidth;\n    canvasContext.moveTo(fromXY[0], fromXY[1]);\n    canvasContext.lineTo(whereXY[0], whereXY[1]);\n    canvasContext.stroke();\n    canvasContext.globalCompositeOperation = \"source-over\";\n  }\n\n  setCurrentCanvasEventListeners() {\n    // Reset all event listeners first\n    this.resetCanvasEventListeners(); // Current active tool-based and tool-state-based assigment\n\n    if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['MOVE_TOOL']) {\n      if (this.state.currentSelectedToolState == LOCAL_CONSTANTS.MOVE_TOOL_STATES['INACTIVE']) {\n        this.setState({\n          canvasOnMouseMove: () => {},\n          canvasOnMouseDown: this.moveToolOnMouseDown,\n          canvasOnMouseUp: this.moveToolOnMouseUp\n        });\n      } else if (this.state.currentSelectedToolState == LOCAL_CONSTANTS.MOVE_TOOL_STATES['ACTIVE']) {\n        this.setState({\n          canvasOnMouseMove: this.moveToolOnMouseMove,\n          canvasOnMouseDown: this.moveToolOnMouseDown,\n          canvasOnMouseUp: this.moveToolOnMouseUp\n        });\n      }\n    } else if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['ERASER_TOOL'] || this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEERASER_TOOL']) {\n      this.setState({\n        canvasOnMouseMove: this.eraserDeeraserToolOnMouseMove,\n        canvasOnMouseDown: this.eraserDeeraserToolOnMouseDown,\n        canvasOnMouseUp: this.eraserDeeraserToolOnMouseUp\n      });\n    } else if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['PAINT_TOOL'] || this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEPAINT_TOOL']) {\n      this.setState({\n        canvasOnMouseMove: this.paintDepaintToolOnMouseMove,\n        canvasOnMouseDown: this.paintDepaintToolOnMouseDown,\n        canvasOnMouseUp: this.paintDepaintToolOnMouseUp\n      });\n    }\n  }\n\n  resetCanvasEventListeners() {\n    this.setState({\n      canvasOnMouseMove: () => {},\n      canvasOnMouseDown: () => {},\n      canvasOnMouseUp: () => {}\n    });\n  }\n\n  changeCanvasBackground(event) {\n    this.setState({\n      currentCanvasColorBackground: event.target.value\n    });\n  }\n\n  onCanvasCutoutChange(index) {\n    this.setState({\n      currentSelectedCutoutIndex: index\n    }, () => {\n      // Process cutout image on response\n      this.processCutoutImage(); // Load image -> after -> initial dimensions, position and draw too\n\n      this.loadImage(); // Recalculate canvas dimensions\n\n      this.recalculateCanvasRealDimensions();\n    });\n  }\n\n  onCanvasMaterialChange(index) {\n    this.setState({\n      currentSelectedMaterialOptionIndex: index,\n      currentSelectedStyleOptionIndex: 0\n    }, this.recalculateCanvasRealDimensions());\n  }\n\n  onCanvasStyleChange(index) {\n    this.setState({\n      currentSelectedStyleOptionIndex: index\n    }, this.recalculateCanvasRealDimensions());\n  }\n\n  onChangeTool(toolName) {\n    // console.log(\"toolname: \" + toolName);\n    this.setState({\n      currentSelectedTool: LOCAL_CONSTANTS.CANVAS_TOOLS[toolName]\n    }, this.setCurrentCanvasEventListeners);\n  }\n\n  onChangeLineWidth(value) {\n    this.setState({\n      lineWidth: value\n    });\n  }\n\n  onChangeLongestSidePick(longestSidePick) {\n    this.setState({\n      longestSidePick: longestSidePick\n    }, () => this.recalculateCanvasLimits());\n  }\n\n  recalculateCanvasLimits() {\n    // Check and recalculate limits and longest side pick\n    var longestSidePick_var = this.state.longestSidePick; // Calculations for slider limits\n\n    var currentSelectedStyleOption = this.state.editorData.material_options[this.state.currentSelectedMaterialOptionIndex].style_options[this.state.currentSelectedStyleOptionIndex];\n    var cutoutAspectRatio = this.state.editorData.cutout_options[this.state.currentSelectedCutoutIndex].img_aspect_ratio; // Min and max slide size picker values\n\n    const sizeSliderMax = currentSelectedStyleOption.maximal_side_length_mm; // What would be min for largest side if we set our smallest side to min\n\n    const sizeSliderMin = Math.ceil(Math.max(cutoutAspectRatio, 1 / cutoutAspectRatio) * currentSelectedStyleOption.minimal_side_length_mm); // Change longest side pick if its smaller/bigger than these limits\n\n    if (longestSidePick_var < sizeSliderMin || longestSidePick_var > sizeSliderMax) {\n      longestSidePick_var = Math.ceil((sizeSliderMin + sizeSliderMax) / 2);\n    }\n\n    this.setState({\n      sizeSliderMin: sizeSliderMin,\n      sizeSliderMax: sizeSliderMax,\n      longestSidePick: longestSidePick_var\n    }, () => {\n      this.recalculateCanvasRealDimensions();\n      this.recalculatePrice();\n    }); // return([sizeSliderMin,sizeSliderMax,longestSidePick_var]);\n  }\n\n  recalculateCanvasRealDimensions() {\n    var cutoutAspectRatio = this.state.editorData.cutout_options[this.state.currentSelectedCutoutIndex].img_aspect_ratio; // Recalculate canvas real width and height dimensions based on current picked longest side\n\n    let currentCanvasDimensionWidth = 0;\n    let currentCanvasDimensionHeight = 0;\n\n    if (cutoutAspectRatio >= 1) {\n      currentCanvasDimensionWidth = this.state.longestSidePick;\n      currentCanvasDimensionHeight = this.state.longestSidePick / cutoutAspectRatio;\n    } else {\n      currentCanvasDimensionWidth = this.state.longestSidePick * cutoutAspectRatio;\n      currentCanvasDimensionHeight = this.state.longestSidePick;\n    }\n\n    this.setState({\n      currentCanvasDimensionWidth: Math.round((currentCanvasDimensionWidth + Number.EPSILON) * 100) / 100,\n      currentCanvasDimensionHeight: Math.round((currentCanvasDimensionHeight + Number.EPSILON) * 100) / 100\n    }, () => this.recalculatePrice());\n  }\n\n  onChangeOrderAmount(value) {\n    this.setState({\n      orderAmount: value\n    }, () => this.recalculatePrice());\n  }\n\n  recalculatePrice() {\n    var currentSelectedStyleOption = this.state.editorData.material_options[this.state.currentSelectedMaterialOptionIndex].style_options[this.state.currentSelectedStyleOptionIndex];\n    const currentSelectedPriceParameter = currentSelectedStyleOption.price_parameter;\n    var canvasPrice = currentSelectedPriceParameter * this.state.longestSidePick;\n    this.setState({\n      canvasPrice: Math.round((canvasPrice + Number.EPSILON) * 100) / 100,\n      canvasTotalPrice: Math.round((this.state.orderAmount * canvasPrice + Number.EPSILON) * 100) / 100\n    });\n  }\n\n  onImageUpload(event) {\n    const file = event.target.files[0];\n    const imageURL = URL.createObjectURL(file);\n    this.setState({\n      uploadedImageURL: imageURL\n    }, () => this.loadImage());\n  }\n\n  render() {\n    if (this.state.editorData != null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(EditorPage, {\n          canvasAddToCartLoading: this.state.canvasAddToCartLoading,\n          canvasElementWidth: this.state.canvasElementWidth,\n          canvasElementHeight: this.state.canvasElementHeight,\n          currentCanvasColorBackground: this.state.currentCanvasColorBackground,\n          lineWidth: this.state.lineWidth,\n          paintDepaintCanvasColor: this.state.paintDepaintCanvasColor,\n          canvasWidth: this.state.canvasWidth,\n          canvasHeight: this.state.canvasHeight,\n          currentCanvasDimensionWidth: this.state.currentCanvasDimensionWidth,\n          currentCanvasDimensionHeight: this.state.currentCanvasDimensionHeight,\n          imageToCanvasScale: this.state.imageToCanvasScale,\n          imageCanvasContext: this.state.imageCanvasContext,\n          eraserDeeraserCanvasContext: this.state.eraserDeeraserCanvasContext,\n          paintDepaintCanvasContext: this.state.paintDepaintCanvasContext,\n          longestSidePick: this.state.longestSidePick,\n          sizeSliderMin: this.state.sizeSliderMin,\n          sizeSliderMax: this.state.sizeSliderMax,\n          orderAmount: this.state.orderAmount,\n          canvasTotalPrice: this.state.canvasTotalPrice,\n          canvasPrice: this.state.canvasPrice,\n          editorData: this.state.editorData,\n          currentSelectedCutoutIndex: this.state.currentSelectedCutoutIndex,\n          currentSelectedMaterialOptionIndex: this.state.currentSelectedMaterialOptionIndex,\n          currentSelectedStyleOptionIndex: this.state.currentSelectedStyleOptionIndex // Tool\n          ,\n          currentSelectedTool: this.state.currentSelectedTool,\n          currentSelectedToolState: this.state.currentSelectedToolState,\n          onChangeTool: this.onChangeTool,\n          onCanvasCutoutChange: this.onCanvasCutoutChange,\n          onCanvasMaterialChange: this.onCanvasMaterialChange,\n          onCanvasStyleChange: this.onCanvasStyleChange,\n          canvasOnMouseDown: this.state.canvasOnMouseDown,\n          canvasOnMouseUp: this.state.canvasOnMouseUp,\n          canvasOnMouseMove: this.state.canvasOnMouseMove,\n          changeCanvasBackground: this.changeCanvasBackground,\n          onChangeLineWidth: this.onChangeLineWidth,\n          changeBrushColor: this.changeBrushColor,\n          onChangeImageScale: this.onChangeImageScale,\n          onChangeLongestSidePick: this.onChangeLongestSidePick,\n          onChangeOrderAmount: this.onChangeOrderAmount,\n          onImageUpload: this.onImageUpload,\n          onAddCanvasToCart: this.onAddCanvasToCart,\n          imageCanvasRef: this.state.imageCanvasRef,\n          eraserDeeraserCanvasRef: this.state.eraserDeeraserCanvasRef,\n          paintDepaintCanvasRef: this.state.paintDepaintCanvasRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 17\n      }, this);\n    } else {\n      return null;\n    }\n  }\n\n}\n\nexport default Editor; // LEGACY ROTATION\n// // Handle rotation with 2d rotational matrix\n// var sinVal = Math.sin(this.state.imageRotation*(Math.PI/180));\n// var cosVal = Math.cos(this.state.imageRotation*(Math.PI/180));\n// var vecX = (this.state.imageWidth/2) - Math.round((this.state.imageWidth/2)*cosVal - (this.state.imageHeight/2)*sinVal);\n// var vecY = ((this.state.imageHeight/2) - Math.round((this.state.imageWidth/2)*sinVal + (this.state.imageHeight/2)*cosVal));\n// // Managing rotation and drawing\n// this.state.imageCanvasContext.translate(this.state.imagePositionX+vecX,this.state.imagePositionY+vecY);\n// this.state.imageCanvasContext.rotate(this.state.imageRotation*(Math.PI/180));\n// this.state.imageCanvasContext.translate(-this.state.imagePositionX-vecX,-this.state.imagePositionY-vecY);\n// // Draw uploaded image\n// this.state.imageCanvasContext.globalCompositeOperation=\"source-over\";\n// this.state.imageCanvasContext.drawImage(this.state.image,this.state.imagePositionX+vecX,this.state.imagePositionY+vecY,new_image_w,new_image_h);\n// // Draw drawCanvas on top of the uploaded image (override)\n// this.state.imageCanvasContext.globalCompositeOperation=\"destination-out\";\n// this.state.imageCanvasContext.drawImage(this.state.eraserDeeraserCanvasContext.canvas, 0, 0) //,this.state.imagePositionX+vecX,this.state.imagePositionY+vecY,new_image_w,new_image_h);\n// this.state.imageCanvasContext.globalCompositeOperation=\"source-over\";\n// this.state.imageCanvasContext.translate(this.state.imagePositionX+vecX,this.state.imagePositionY+vecY);\n// this.state.imageCanvasContext.rotate(-this.state.imageRotation*(Math.PI/180));\n// this.state.imageCanvasContext.translate(-this.state.imagePositionX-vecX,-this.state.imagePositionY-vecY);","map":{"version":3,"sources":["/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_Editor/App_Editor.js"],"names":["React","ReactDOM","axios","Link","Box","Grid","IconButton","Slider","GLOBAL_CONSTANTS","LOCAL_CONSTANTS","EditorPage","getEditorPage","addCartCanvas","Editor","Component","constructor","props","state","canvasAddToCartLoading","editorData","currentSelectedCutoutIndex","currentSelectedMaterialOptionIndex","currentSelectedStyleOptionIndex","longestSidePick","sizeSliderMin","sizeSliderMax","orderAmount","canvasPrice","canvasTotalPrice","lineWidth","canvasMaxLength","canvasWidth","canvasHeight","canvasElementMaxLength","canvasElementWidth","canvasElementHeight","canvasPreviousPositionX","canvasPreviousPositionY","uploadedImageURL","imageCanvasRef","createRef","imageCanvasContext","eraserDeeraserCanvasRef","eraserDeeraserCanvasContext","paintDepaintCanvasRef","paintDepaintCanvasContext","paintDepaintCanvasColor","currentCanvasDimensionWidth","currentCanvasDimensionHeight","currentCanvasColorBackground","longestImageDim","shortestCanvasDim","image","Image","imageLoaded","imageWidth","imageHeight","imageToOriginalImageScale","imageToCanvasScale","imagePositionX","imagePositionY","imageRotation","currentSelectedTool","CANVAS_TOOLS","currentSelectedToolState","MOVE_TOOL_STATES","canvasOnMouseMove","console","log","canvasOnMouseDown","canvasOnMouseUp","loadImage","bind","onChangeLongestSidePick","onChangeOrderAmount","recalculatePrice","onImageUpload","onAddCanvasToCart","onChangeTool","moveToolOnMouseMove","moveToolOnMouseDown","moveToolOnMouseUp","eraserDeeraserToolOnMouseMove","eraserDeeraserToolOnMouseDown","eraserDeeraserToolOnMouseUp","paintDepaintToolOnMouseMove","paintDepaintToolOnMouseDown","paintDepaintToolOnMouseUp","changeCanvasBackground","changeBrushColor","onChangeLineWidth","onChangeImageScale","onCanvasCutoutChange","onCanvasMaterialChange","onCanvasStyleChange","componentDidMount","onGetEditorPage","setCurrentCanvasEventListeners","assignCanvasContexts","setState","current","getContext","scope","then","ret","status","data","recalculateCanvasLimits","processCutoutImage","alert","canvasStyleOptionId","canvasCutoutOptionId","amount","backgroundColor","updateCartStickers","currentSelectedCutoutAspectRatio","cutout_options","img_aspect_ratio","src","onload","initialImageDimensionsPosition","Math","max","width","height","min","scale","new_image_w","round","new_image_h","ceil","clearCanvas","redrawImageOnCanvas","clearRect","globalCompositeOperation","drawImage","canvas","event","trueCanvasPosition","getTrueCanvasPosition","x","y","trueFollowingDrawCanvasPosition","getTrueFollowingDrawCanvasPosition","drawLineToCanvas","ERASER_DEERASER_TOOL_STATES","PAINT_DEPAINT_TOOL_STATES","target","value","rect","currentTarget","getBoundingClientRect","scale_x","scale_y","clientX","left","clientY","top","canvasContext","fromXY","whereXY","color","beginPath","strokeStyle","lineCap","lineJoin","moveTo","lineTo","stroke","resetCanvasEventListeners","index","recalculateCanvasRealDimensions","toolName","longestSidePick_var","currentSelectedStyleOption","material_options","style_options","cutoutAspectRatio","maximal_side_length_mm","minimal_side_length_mm","Number","EPSILON","currentSelectedPriceParameter","price_parameter","file","files","imageURL","URL","createObjectURL","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './App_Editor.css';\nimport { Link } from 'react-router-dom';\n    \n// MUI \nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport Slider from '@mui/material/Slider';\n\n// Import constants\nimport * as GLOBAL_CONSTANTS from './../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from './LocalConstants'\n\n// Components\nimport EditorPage from './App_EditorPage'\n\n// Api functions\nimport getEditorPage from './Func_getEditorPage';\nimport addCartCanvas from './Func_addCartCanvas';\n\nclass Editor extends React.Component {\n\n\n    constructor(props){\n        super(props);\n        this.state = {\n            canvasAddToCartLoading: false,\n\n            // Main editor data with materials, styles, cutout images\n            editorData: null,\n            currentSelectedCutoutIndex: 1,\n            currentSelectedMaterialOptionIndex: 0,\n            currentSelectedStyleOptionIndex: 0,\n            longestSidePick: 0,\n            sizeSliderMin: 0,\n            sizeSliderMax: 0,\n            orderAmount: 1,\n            canvasPrice: 0,\n            canvasTotalPrice: 0,\n            \n            //// Canvas\n            lineWidth: 50,\n            canvasMaxLength: 2000, // Max pixel density per side\n            canvasWidth: 0, \n            canvasHeight: 0,\n            // Canvas element width-height will depend on cutout image\n            // and its aspect ratio and canvasElementMaxLength \n            canvasElementMaxLength: 600,\n            canvasElementWidth: 0,\n            canvasElementHeight: 0,\n            canvasPreviousPositionX: 0,\n            canvasPreviousPositionY: 0,\n            // Image canvas\n            uploadedImageURL: null,\n            imageCanvasRef: React.createRef(),\n            imageCanvasContext: null,\n            // EraserDeeraser canvas\n            eraserDeeraserCanvasRef: React.createRef(),\n            eraserDeeraserCanvasContext: null,\n            // PaintDepaint canvas\n            paintDepaintCanvasRef: React.createRef(),\n            paintDepaintCanvasContext: null,\n            paintDepaintCanvasColor: \"#E54B4B\",\n            //\n            currentCanvasDimensionWidth: 50,\n            currentCanvasDimensionHeight: 50,\n            currentCanvasColorBackground: \"#0000FF\",\n\n            longestImageDim: 0,\n            shortestCanvasDim: 0,\n            \n            // Design image\n            image: new Image(),\n            imageLoaded: false,\n            imageWidth: 0, // Pixel density\n            imageHeight: 0,\n            imageToOriginalImageScale: 0,\n            imageToCanvasScale: 1, // Percentage (shortest image dim)/(longest canvas dim)\n            imagePositionX: 0,\n            imagePositionY: 0,\n            imageRotation: 0, // Rotation in degrees\n            \n            //// Tools\n            currentSelectedTool: LOCAL_CONSTANTS.CANVAS_TOOLS['MOVE_TOOL'],\n            currentSelectedToolState: LOCAL_CONSTANTS.MOVE_TOOL_STATES['INACTIVE'],\n\n            // Canvas events (empty functions by default)\n            canvasOnMouseMove: () => {console.log(\"*** canvas on move empty\");},\n            canvasOnMouseDown: () => {console.log(\"*** canvas on down empty\");},\n            canvasOnMouseUp: () => {console.log(\"*** canvas on up empty\");},\n        };\n        this.loadImage = this.loadImage.bind(this);\n        this.onChangeLongestSidePick =  this.onChangeLongestSidePick.bind(this);\n        this.onChangeOrderAmount =  this.onChangeOrderAmount.bind(this);\n        this.recalculatePrice =  this.recalculatePrice.bind(this);\n        this.onImageUpload =  this.onImageUpload.bind(this);\n        this.onAddCanvasToCart =  this.onAddCanvasToCart.bind(this);\n        \n        //// Tools\n        this.onChangeTool = this.onChangeTool.bind(this);\n        // Move tool;\n        this.moveToolOnMouseMove = this.moveToolOnMouseMove.bind(this);\n        this.moveToolOnMouseDown = this.moveToolOnMouseDown.bind(this);\n        this.moveToolOnMouseUp = this.moveToolOnMouseUp.bind(this);\n        // Eraser tool\n        this.eraserDeeraserToolOnMouseMove = this.eraserDeeraserToolOnMouseMove.bind(this);\n        this.eraserDeeraserToolOnMouseDown = this.eraserDeeraserToolOnMouseDown.bind(this);\n        this.eraserDeeraserToolOnMouseUp = this.eraserDeeraserToolOnMouseUp.bind(this);\n        // Eraser tool\n        this.paintDepaintToolOnMouseMove = this.paintDepaintToolOnMouseMove.bind(this);\n        this.paintDepaintToolOnMouseDown = this.paintDepaintToolOnMouseDown.bind(this);\n        this.paintDepaintToolOnMouseUp = this.paintDepaintToolOnMouseUp.bind(this);\n\n        this.changeCanvasBackground = this.changeCanvasBackground.bind(this);\n        this.changeBrushColor = this.changeBrushColor.bind(this);\n        this.onChangeLineWidth = this.onChangeLineWidth.bind(this);\n        this.onChangeImageScale = this.onChangeImageScale.bind(this);\n\n        // Changing options\n        this.onCanvasCutoutChange = this.onCanvasCutoutChange.bind(this);\n        this.onCanvasMaterialChange = this.onCanvasMaterialChange.bind(this);\n        this.onCanvasStyleChange = this.onCanvasStyleChange.bind(this);\n    }\n\n    componentDidMount(){\n        // Initial api call for editor data + process cutouts + load image \n        this.onGetEditorPage();\n\n        // Set default canvas event listeners for current selected tool\n        this.setCurrentCanvasEventListeners();  \n    }\n\n    assignCanvasContexts(){\n        this.setState({\n            imageCanvasContext: this.state.imageCanvasRef.current.getContext(\"2d\"),\n            eraserDeeraserCanvasContext: this.state.eraserDeeraserCanvasRef.current.getContext(\"2d\"),\n            paintDepaintCanvasContext: this.state.paintDepaintCanvasRef.current.getContext(\"2d\")\n        });\n    }\n\n    onGetEditorPage(){\n        // Use imported function core and add own functionality for this component\n        // Create scope variable to be used inside .then function\n        const scope = this;\n        // Custom response function\n        getEditorPage().then(function(ret){\n            // Update cart sticker list\n\n            if (ret.status == 200){ // 200 OK status code\n                scope.setState({ \n                    editorData: ret.data,\n                },\n                    ()=>{\n                        // Calculate size limits for canvas in mm for size slider\n                        scope.recalculateCanvasLimits();\n\n                        // Assign contexts to canvases\n                        scope.assignCanvasContexts();\n                        \n                        // Process cutout image on response\n                        scope.processCutoutImage();\n                        \n                        // Load image -> after -> initial dimensions, position and draw too\n                        // scope.loadImage();\n                    });\n\n            }else{\n                alert(\"Error with getting data for the editor, contact the maintainer\");\n            }\n        });\n      }\n\n    onAddCanvasToCart(canvasStyleOptionId, canvasCutoutOptionId, amount, longestSidePick, backgroundColor, imageCanvasContext,  eraserDeeraserCanvasContext,  paintDepaintCanvasContext){\n        // Use api function core and add own functionality\n        // Create scope variable to be used inside .then function\n        const scope = this;\n        // Custom response function\n        this.setState({canvasAddToCartLoading: true});\n        addCartCanvas(canvasStyleOptionId, canvasCutoutOptionId, amount, longestSidePick, backgroundColor, imageCanvasContext, eraserDeeraserCanvasContext, paintDepaintCanvasContext).then(function(ret){\n            scope.setState({canvasAddToCartLoading: false});\n            if (ret.status == 200){ // 200 OK status code\n                scope.props.updateCartStickers();\n                alert(\"Canvas has been added to your cart\")\n            }else{\n                alert(\"There has been an error with status code \" + ret.status + \". Try again, if the problem persists, please contact the maintainer.\");\n            }   \n        });\n    }\n\n    processCutoutImage(){\n        // Process cutout image and assign canvases heights/widths accordingly\n        var currentSelectedCutoutIndex = this.state.currentSelectedCutoutIndex;\n        var currentSelectedCutoutAspectRatio = this.state.editorData.cutout_options[currentSelectedCutoutIndex].img_aspect_ratio;\n        if (currentSelectedCutoutAspectRatio >= 1.0){\n            this.setState({\n                canvasWidth: this.state.canvasMaxLength, \n                canvasHeight: this.state.canvasMaxLength*(1/currentSelectedCutoutAspectRatio),\n\n                canvasElementWidth: this.state.canvasElementMaxLength,\n                canvasElementHeight: this.state.canvasElementMaxLength*(1/currentSelectedCutoutAspectRatio),\n            });\n        }else if(currentSelectedCutoutAspectRatio < 1.0){\n            this.setState({\n                canvasWidth: this.state.canvasMaxLength*currentSelectedCutoutAspectRatio, \n                canvasHeight: this.state.canvasMaxLength,\n\n                canvasElementWidth: this.state.canvasElementMaxLength*currentSelectedCutoutAspectRatio,\n                canvasElementHeight: this.state.canvasElementMaxLength,                \n            });\n        }\n    }\n\n    loadImage(){\n        // Load image\n        if(this.state.uploadedImageURL){\n            this.state.image.src = this.state.uploadedImageURL;\n            // Set callback function on loading sticker image\n            const scope = this;\n            this.state.image.onload = function() {\n                scope.setState({\n                    imageLoaded: true,\n                });\n                // Set initial image dimensions, position and draw\n                scope.initialImageDimensionsPosition();\n            }\n        }\n        \n    }\n\n    initialImageDimensionsPosition(){\n        // Find the longest dimension of the image and scale the other dimension so that \n        // the image can fit the canvas, get the smallest dimension of the canvas too\n        var longestImageDim = Math.max(this.state.image.width, this.state.image.height);\n        var shortestCanvasDim = Math.min(this.state.canvasWidth, this.state.canvasHeight);\n        this.setState({\n            longestImageDim: longestImageDim,\n            shortestCanvasDim: shortestCanvasDim\n        });\n\n        var scale = this.state.imageToCanvasScale*(shortestCanvasDim/longestImageDim);\n\n        // Set new image dimensions\n        var new_image_w = Math.round(this.state.image.width*scale);\n        var new_image_h = Math.round(this.state.image.height*scale);\n        this.setState({\n            imageToOriginalImageScale: scale,\n            // Set new dimension\n            imageWidth: new_image_w,\n            imageHeight: new_image_h,\n            // Set new center position\n            imagePositionX: Math.round(this.state.canvasWidth/2) - Math.ceil(new_image_w/2),\n            imagePositionY: Math.round(this.state.canvasHeight/2) - Math.ceil(new_image_h/2),\n        });\n\n        // Clear canvas and redraw the image\n        this.clearCanvas();\n        this.redrawImageOnCanvas();\n    }\n\n    clearCanvas(){\n        // Make canvas empty\n        // this.state.imageCanvasContext.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n        this.state.imageCanvasContext.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    }\n\n    redrawImageOnCanvas(){        \n        // Draw uploaded image\n        this.state.imageCanvasContext.globalCompositeOperation=\"source-over\";\n        this.state.imageCanvasContext.drawImage(this.state.image,this.state.imagePositionX,this.state.imagePositionY,this.state.imageWidth,this.state.imageHeight);\n        // Use eraser canvas to remove pixels from the sticker image\n        this.state.imageCanvasContext.globalCompositeOperation=\"destination-out\";\n        this.state.imageCanvasContext.drawImage(this.state.eraserDeeraserCanvasContext.canvas, this.state.imagePositionX, this.state.imagePositionY, Math.round(this.state.canvasWidth*this.state.imageToCanvasScale),Math.round(this.state.canvasHeight*this.state.imageToCanvasScale));\n        this.state.imageCanvasContext.globalCompositeOperation=\"source-over\"; \n        this.state.imageCanvasContext.drawImage(this.state.paintDepaintCanvasContext.canvas,0,0,this.state.canvasWidth,this.state.canvasHeight);\n    }\n\n    onChangeImageScale(imageToCanvasScale){\n        // Set scales\n        var imageToOriginalImageScale = imageToCanvasScale*(this.state.shortestCanvasDim/this.state.longestImageDim);\n        this.setState({\n            imageToCanvasScale: imageToCanvasScale,\n            imageToOriginalImageScale: imageToOriginalImageScale,\n        }, () => {\n            // Set new image dimensions\n            this.setState({\n                imageWidth: Math.round(this.state.image.width*imageToOriginalImageScale),\n                imageHeight: Math.round(this.state.image.height*imageToOriginalImageScale)\n            }, () => {\n                this.clearCanvas();\n                this.redrawImageOnCanvas(); \n            });\n        });\n    }\n\n    // TOOLS //\n    // Move tool:\n    // Moving the image on the canvas will work so that after clicking\n    // we are in the state to move/redraw the image on every move and thus adding \n    // event listener on mousemove. On mouse up we will remove the event listener\n    moveToolOnMouseDown(event){\n        // Activate the move tool\n        this.setState({\n            currentSelectedToolState: LOCAL_CONSTANTS.MOVE_TOOL_STATES['ACTIVE'],\n        }, () => {\n            this.setCurrentCanvasEventListeners();\n        });\n    }\n    moveToolOnMouseMove(event){\n        var trueCanvasPosition = this.getTrueCanvasPosition(event);\n        var x = trueCanvasPosition[0];\n        var y = trueCanvasPosition[1];\n\n\n        // console.log('move: x: ' + x + ',y: ' + y);\n\n        this.setState({\n            // Center image position\n            imagePositionX: x - Math.round(this.state.imageWidth/2),\n            imagePositionY: y - Math.round(this.state.imageHeight/2),\n        },() => {\n            this.clearCanvas();\n            this.redrawImageOnCanvas();\n        });\n    }\n    moveToolOnMouseUp(){\n        // Deactivate the move tool\n        this.setState({\n            currentSelectedToolState: LOCAL_CONSTANTS.MOVE_TOOL_STATES['INACTIVE']\n        }, () => {\n            this.setCurrentCanvasEventListeners();\n        });\n    }\n    // Eraser + deeraser tool:\n    eraserDeeraserToolOnMouseDown(event){\n\n        var trueFollowingDrawCanvasPosition = this.getTrueFollowingDrawCanvasPosition(event);\n        var x = trueFollowingDrawCanvasPosition[0];\n        var y = trueFollowingDrawCanvasPosition[1];\n\n        // Eraser vs Deeraser\n        if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['ERASER_TOOL']){\n            this.drawLineToCanvas(  this.state.eraserDeeraserCanvasContext,\n                [x, y],[x, y],\n                \"source-over\", \"rgba(0,0,0,1)\",\n                this.state.lineWidth\n            );\n        }else if(this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEERASER_TOOL']){\n            this.drawLineToCanvas(  this.state.eraserDeeraserCanvasContext,\n                [x, y],[x, y],\n                \"destination-out\", \"rgba(0,0,0,1)\",\n                this.state.lineWidth\n            );\n        }\n        \n        this.redrawImageOnCanvas();\n\n        // Activate eraser/deeraser, save previous position, set events to canvas\n        this.setState({\n            currentSelectedToolState: LOCAL_CONSTANTS.ERASER_DEERASER_TOOL_STATES['ACTIVE'],\n            canvasPreviousPositionX: x, canvasPreviousPositionY: y\n        }, () => {\n            this.setCurrentCanvasEventListeners(); \n        });\n    }\n    eraserDeeraserToolOnMouseMove(event){\n        if(this.state.currentSelectedToolState == LOCAL_CONSTANTS.ERASER_DEERASER_TOOL_STATES['ACTIVE']){\n\n            var trueFollowingDrawCanvasPosition = this.getTrueFollowingDrawCanvasPosition(event);\n            var x = trueFollowingDrawCanvasPosition[0]; // - scaled image/drawcanvas \n            var y = trueFollowingDrawCanvasPosition[1];\n\n            \n            \n            // Draw with Eraser vs Deeraser\n            if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['ERASER_TOOL']){\n                this.drawLineToCanvas(  this.state.eraserDeeraserCanvasContext,\n                    [this.state.canvasPreviousPositionX, this.state.canvasPreviousPositionY],[x, y],\n                    \"source-over\", \"rgba(0,0,0,1)\",\n                    this.state.lineWidth\n                );\n            }else if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEERASER_TOOL']){\n                this.drawLineToCanvas(  this.state.eraserDeeraserCanvasContext,\n                    [this.state.canvasPreviousPositionX, this.state.canvasPreviousPositionY],[x, y],\n                    \"destination-out\", \"rgba(0,0,0,1)\",\n                    this.state.lineWidth\n                );\n            }\n\n            this.clearCanvas();\n            this.redrawImageOnCanvas();\n            // Save previous position\n            this.setState({\n                canvasPreviousPositionX: x,\n                canvasPreviousPositionY: y\n            });  \n        }else if(this.state.currentSelectedToolState == LOCAL_CONSTANTS.ERASER_DEERASER_TOOL_STATES['INACTIVE']){\n            // Canvas real position is different because element dimensions are different\n            var trueCanvasPosition = this.getTrueCanvasPosition(event);\n            var x = trueCanvasPosition[0];\n            var y = trueCanvasPosition[1];\n\n            this.clearCanvas();\n            this.redrawImageOnCanvas();\n\n            this.drawLineToCanvas(  this.state.imageCanvasContext,\n                [x, y],[x, y],\n                \"source-over\", \"rgba(255,0,0,0.5)\",\n                this.state.lineWidth*(this.state.imageToCanvasScale)\n            );\n        }\n    }\n    eraserDeeraserToolOnMouseUp(){\n        // Deactivate the eraser tool and set canvas event listeners\n        this.setState({\n            currentSelectedToolState: LOCAL_CONSTANTS.ERASER_DEERASER_TOOL_STATES['INACTIVE']\n        }, () => {\n            this.setCurrentCanvasEventListeners();\n        });\n    }\n    // Paint + Depaint tool:\n    paintDepaintToolOnMouseDown(event){\n\n        var trueCanvasPosition = this.getTrueCanvasPosition(event);\n        var x = trueCanvasPosition[0];\n        var y = trueCanvasPosition[1];\n\n        // Paint vs Depaint\n        if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['PAINT_TOOL']){\n            this.drawLineToCanvas(  this.state.paintDepaintCanvasContext,\n                [x, y],[x, y],\n                \"source-over\", this.state.paintDepaintCanvasColor,\n                this.state.lineWidth\n            );\n        }else if(this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEPAINT_TOOL']){\n            this.drawLineToCanvas(  this.state.paintDepaintCanvasContext,\n                [x, y],[x, y],\n                \"destination-out\", \"rgba(0,0,0,1)\",\n                this.state.lineWidth\n            );\n        }\n        \n        this.redrawImageOnCanvas();\n        // Activate paint/depaint, save previous position, set events to canvas\n        this.setState({\n            currentSelectedToolState: LOCAL_CONSTANTS.PAINT_DEPAINT_TOOL_STATES['ACTIVE'],\n            canvasPreviousPositionX: x, canvasPreviousPositionY: y\n        }, () => {\n            this.setCurrentCanvasEventListeners(); \n        });\n    }\n    paintDepaintToolOnMouseMove(event){\n        if(this.state.currentSelectedToolState == LOCAL_CONSTANTS.PAINT_DEPAINT_TOOL_STATES['ACTIVE']){\n\n            var trueCanvasPosition = this.getTrueCanvasPosition(event);\n            var x = trueCanvasPosition[0];\n            var y = trueCanvasPosition[1];\n            \n            // Draw with Paint vs Depaint\n            if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['PAINT_TOOL']){\n                this.drawLineToCanvas(  this.state.paintDepaintCanvasContext,\n                    [this.state.canvasPreviousPositionX, this.state.canvasPreviousPositionY],[x, y],\n                    \"source-over\", this.state.paintDepaintCanvasColor,\n                    this.state.lineWidth\n                );\n            }else if (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEPAINT_TOOL']){\n                this.drawLineToCanvas(  this.state.paintDepaintCanvasContext,\n                    [this.state.canvasPreviousPositionX, this.state.canvasPreviousPositionY],[x, y],\n                    \"destination-out\", \"rgba(0,0,0,1)\",\n                    this.state.lineWidth\n                );\n            }\n\n            this.clearCanvas();\n            this.redrawImageOnCanvas();\n            // Save previous position\n            this.setState({\n                canvasPreviousPositionX: x,\n                canvasPreviousPositionY: y\n            });  \n        }else if(this.state.currentSelectedToolState == LOCAL_CONSTANTS.PAINT_DEPAINT_TOOL_STATES['INACTIVE']){\n            // Canvas real position is different because element dimensions are different\n            var trueCanvasPosition = this.getTrueCanvasPosition(event);\n            var x = trueCanvasPosition[0];\n            var y = trueCanvasPosition[1];\n\n            this.clearCanvas();\n            this.redrawImageOnCanvas();\n\n            this.drawLineToCanvas(  this.state.imageCanvasContext,\n                [x, y],[x, y],\n                \"source-over\", \"rgba(255,0,0,0.5)\",\n                this.state.lineWidth\n            );\n        }\n    }\n    changeBrushColor(event){\n        this.setState({paintDepaintCanvasColor: event.target.value});\n    }\n\n    paintDepaintToolOnMouseUp(){\n        // Deactivate the eraser tool and set canvas event listeners\n        this.setState({\n            currentSelectedToolState: LOCAL_CONSTANTS.PAINT_DEPAINT_TOOL_STATES['INACTIVE']\n        }, () => {\n            this.setCurrentCanvasEventListeners();\n        });\n    }\n\n    getTrueCanvasPosition(event){\n        // Canvas element has different 'real' displayed resolution than the internal one\n        var rect = event.currentTarget.getBoundingClientRect();\n        // Canvas real position is different because element is different\n        var scale_x = this.state.canvasWidth/this.state.canvasElementWidth;\n        var scale_y = this.state.canvasHeight/this.state.canvasElementHeight;\n        var x = scale_x*(event.clientX - rect.left);\n        var y = scale_y*(event.clientY - rect.top);\n        return [x,y]\n    }\n    getTrueFollowingDrawCanvasPosition(event){\n        // Get position on the drawing canvas so that it will overlap image\n        // even though it is scaled to cover the image (with aspect ratio 1) \n        var trueCanvasPosition = this.getTrueCanvasPosition(event);\n        var x = (trueCanvasPosition[0]-(this.state.imagePositionX))*(1/this.state.imageToCanvasScale);\n        var y = (trueCanvasPosition[1]-(this.state.imagePositionY))*(1/this.state.imageToCanvasScale);\n        return [x,y]\n    }\n\n    drawLineToCanvas(canvasContext, fromXY, whereXY, globalCompositeOperation, color, lineWidth){\n        canvasContext.beginPath();\n        canvasContext.globalCompositeOperation=globalCompositeOperation;\n        canvasContext.strokeStyle =  color;\n        canvasContext.lineCap = \"round\";\n        canvasContext.lineJoin = \"round\";\n        canvasContext.lineWidth = lineWidth;\n        \n        canvasContext.moveTo(fromXY[0], fromXY[1]);\n        canvasContext.lineTo(whereXY[0], whereXY[1]);\n        canvasContext.stroke();\n        canvasContext.globalCompositeOperation=\"source-over\";\n    }\n    \n    setCurrentCanvasEventListeners(){\n        // Reset all event listeners first\n        this.resetCanvasEventListeners();\n\n        // Current active tool-based and tool-state-based assigment\n        if(this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['MOVE_TOOL']){\n            if(this.state.currentSelectedToolState == LOCAL_CONSTANTS.MOVE_TOOL_STATES['INACTIVE']){\n                this.setState({\n                    canvasOnMouseMove: () => {},\n                    canvasOnMouseDown: this.moveToolOnMouseDown,\n                    canvasOnMouseUp: this.moveToolOnMouseUp,\n                });\n            }else if(this.state.currentSelectedToolState == LOCAL_CONSTANTS.MOVE_TOOL_STATES['ACTIVE']){\n                this.setState({\n                    canvasOnMouseMove: this.moveToolOnMouseMove,\n                    canvasOnMouseDown: this.moveToolOnMouseDown,\n                    canvasOnMouseUp: this.moveToolOnMouseUp,\n                });\n            }\n        }else if((this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['ERASER_TOOL']) || \n                (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEERASER_TOOL'])){\n            this.setState({\n                canvasOnMouseMove: this.eraserDeeraserToolOnMouseMove,\n                canvasOnMouseDown: this.eraserDeeraserToolOnMouseDown,\n                canvasOnMouseUp: this.eraserDeeraserToolOnMouseUp,\n            });\n        }else if((this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['PAINT_TOOL']) || \n        (this.state.currentSelectedTool == LOCAL_CONSTANTS.CANVAS_TOOLS['DEPAINT_TOOL'])){\n            this.setState({\n                canvasOnMouseMove: this.paintDepaintToolOnMouseMove,\n                canvasOnMouseDown: this.paintDepaintToolOnMouseDown,\n                canvasOnMouseUp: this.paintDepaintToolOnMouseUp,\n            });\n        }\n    }\n\n    resetCanvasEventListeners(){\n        this.setState({\n            canvasOnMouseMove: () => {},\n            canvasOnMouseDown: () => {},\n            canvasOnMouseUp: () => {},\n        });\n    }\n\n    changeCanvasBackground(event){\n        this.setState({currentCanvasColorBackground: event.target.value});\n    }\n\n    onCanvasCutoutChange(index){\n        this.setState({\n            currentSelectedCutoutIndex: index\n        },() => {\n            // Process cutout image on response\n            this.processCutoutImage();\n                        \n            // Load image -> after -> initial dimensions, position and draw too\n            this.loadImage();\n\n            // Recalculate canvas dimensions\n            this.recalculateCanvasRealDimensions();\n        });\n    }\n    onCanvasMaterialChange(index){\n        this.setState({\n            currentSelectedMaterialOptionIndex: index,\n            currentSelectedStyleOptionIndex: 0\n        }, this.recalculateCanvasRealDimensions());\n    }\n    onCanvasStyleChange(index){\n        this.setState({\n            currentSelectedStyleOptionIndex: index,\n        }, this.recalculateCanvasRealDimensions());\n    }\n\n    onChangeTool(toolName){\n        // console.log(\"toolname: \" + toolName);\n        this.setState({\n            currentSelectedTool: LOCAL_CONSTANTS.CANVAS_TOOLS[toolName]\n        }, this.setCurrentCanvasEventListeners);\n    }\n\n    onChangeLineWidth(value){\n        this.setState({\n            lineWidth: value\n        });\n    }\n\n    onChangeLongestSidePick(longestSidePick){\n        this.setState({longestSidePick: longestSidePick}, \n            () => this.recalculateCanvasLimits());\n    }\n\n    recalculateCanvasLimits(){\n        // Check and recalculate limits and longest side pick\n        var longestSidePick_var = this.state.longestSidePick;\n        // Calculations for slider limits\n        var currentSelectedStyleOption = this.state.editorData.material_options[this.state.currentSelectedMaterialOptionIndex].style_options[this.state.currentSelectedStyleOptionIndex];\n        var cutoutAspectRatio = this.state.editorData.cutout_options[this.state.currentSelectedCutoutIndex].img_aspect_ratio;\n        // Min and max slide size picker values\n        const sizeSliderMax = currentSelectedStyleOption.maximal_side_length_mm;\n        // What would be min for largest side if we set our smallest side to min\n        const sizeSliderMin = Math.ceil(Math.max(cutoutAspectRatio, 1/cutoutAspectRatio)*currentSelectedStyleOption.minimal_side_length_mm);\n        // Change longest side pick if its smaller/bigger than these limits\n        if((longestSidePick_var < sizeSliderMin) || (longestSidePick_var > sizeSliderMax)){\n            longestSidePick_var = Math.ceil((sizeSliderMin+sizeSliderMax)/2)\n        }\n        this.setState({\n            sizeSliderMin: sizeSliderMin,\n            sizeSliderMax: sizeSliderMax,\n            longestSidePick: longestSidePick_var\n        }, () => {\n            this.recalculateCanvasRealDimensions();\n            this.recalculatePrice();\n        })\n\n        // return([sizeSliderMin,sizeSliderMax,longestSidePick_var]);\n    }\n\n    recalculateCanvasRealDimensions(){\n        var cutoutAspectRatio = this.state.editorData.cutout_options[this.state.currentSelectedCutoutIndex].img_aspect_ratio;\n\n        // Recalculate canvas real width and height dimensions based on current picked longest side\n        let currentCanvasDimensionWidth = 0;\n        let currentCanvasDimensionHeight = 0;\n        if(cutoutAspectRatio >= 1){\n            currentCanvasDimensionWidth = this.state.longestSidePick;\n            currentCanvasDimensionHeight = this.state.longestSidePick/cutoutAspectRatio;\n        }else{\n            currentCanvasDimensionWidth = (this.state.longestSidePick)*cutoutAspectRatio;\n            currentCanvasDimensionHeight = this.state.longestSidePick;\n        }\n        this.setState({\n            currentCanvasDimensionWidth: Math.round((currentCanvasDimensionWidth + Number.EPSILON) * 100) / 100,\n            currentCanvasDimensionHeight: Math.round((currentCanvasDimensionHeight + Number.EPSILON) * 100) / 100,\n        }, () => this.recalculatePrice());\n    }\n\n    onChangeOrderAmount(value){\n        this.setState({\n            orderAmount: value\n        }, ()=> this.recalculatePrice());\n    } \n\n    recalculatePrice(){\n        var currentSelectedStyleOption = this.state.editorData.material_options[this.state.currentSelectedMaterialOptionIndex].style_options[this.state.currentSelectedStyleOptionIndex];\n        const currentSelectedPriceParameter = currentSelectedStyleOption.price_parameter;\n        var canvasPrice = currentSelectedPriceParameter*this.state.longestSidePick;\n        this.setState({\n            canvasPrice: Math.round((canvasPrice + Number.EPSILON) * 100) / 100,\n            canvasTotalPrice: Math.round((this.state.orderAmount*canvasPrice + Number.EPSILON) * 100) / 100\n        });\n    }\n\n    onImageUpload(event){\n        const file = event.target.files[0];\n\n        const imageURL = URL.createObjectURL(file);\n        this.setState({\n            uploadedImageURL: imageURL\n        }, () => this.loadImage() );\n    }\n\n    render() {\n            \n        if(this.state.editorData != null){\n            return(\n                <div>\n                    <EditorPage\n                        canvasAddToCartLoading = {this.state.canvasAddToCartLoading}\n\n                        canvasElementWidth = {this.state.canvasElementWidth}\n                        canvasElementHeight = {this.state.canvasElementHeight}                    \n                        currentCanvasColorBackground = {this.state.currentCanvasColorBackground}\n                        lineWidth = {this.state.lineWidth}\n                        paintDepaintCanvasColor = {this.state.paintDepaintCanvasColor}\n                        canvasWidth = {this.state.canvasWidth}\n                        canvasHeight = {this.state.canvasHeight}\n                        currentCanvasDimensionWidth = {this.state.currentCanvasDimensionWidth}\n                        currentCanvasDimensionHeight = {this.state.currentCanvasDimensionHeight}\n                        imageToCanvasScale = {this.state.imageToCanvasScale}\n\n                        imageCanvasContext = {this.state.imageCanvasContext}\n                        eraserDeeraserCanvasContext = {this.state.eraserDeeraserCanvasContext}\n                        paintDepaintCanvasContext = {this.state.paintDepaintCanvasContext} \n                        \n                        longestSidePick = {this.state.longestSidePick}\n                        sizeSliderMin = {this.state.sizeSliderMin}\n                        sizeSliderMax = {this.state.sizeSliderMax}\n                        orderAmount = {this.state.orderAmount}\n                        canvasTotalPrice = {this.state.canvasTotalPrice}\n                        canvasPrice = {this.state.canvasPrice}\n\n                        editorData = {this.state.editorData}\n                        currentSelectedCutoutIndex = {this.state.currentSelectedCutoutIndex}\n                        currentSelectedMaterialOptionIndex = {this.state.currentSelectedMaterialOptionIndex}\n                        currentSelectedStyleOptionIndex = {this.state.currentSelectedStyleOptionIndex}\n                        // Tool\n                        currentSelectedTool = {this.state.currentSelectedTool}\n                        currentSelectedToolState = {this.state.currentSelectedToolState}\n                        onChangeTool = {this.onChangeTool}\n\n                        onCanvasCutoutChange = {this.onCanvasCutoutChange}\n                        onCanvasMaterialChange = {this.onCanvasMaterialChange}\n                        onCanvasStyleChange = {this.onCanvasStyleChange}\n    \n                        canvasOnMouseDown = {this.state.canvasOnMouseDown}\n                        canvasOnMouseUp = {this.state.canvasOnMouseUp}\n                        canvasOnMouseMove = {this.state.canvasOnMouseMove}\n                        changeCanvasBackground = {this.changeCanvasBackground}\n                        onChangeLineWidth = {this.onChangeLineWidth}\n                        changeBrushColor = {this.changeBrushColor}\n                        onChangeImageScale = {this.onChangeImageScale}\n                        onChangeLongestSidePick = {this.onChangeLongestSidePick}\n                        onChangeOrderAmount = {this.onChangeOrderAmount}\n                        onImageUpload = {this.onImageUpload}\n                        onAddCanvasToCart = {this.onAddCanvasToCart}\n    \n                        imageCanvasRef = {this.state.imageCanvasRef}\n                        eraserDeeraserCanvasRef = {this.state.eraserDeeraserCanvasRef}\n                        paintDepaintCanvasRef = {this.state.paintDepaintCanvasRef}\n                    />      \n                </div>\n            );\n        }else{\n            return(null);\n        }\n        \n    }\n}\n\nexport default Editor\n\n\n// LEGACY ROTATION\n// // Handle rotation with 2d rotational matrix\n// var sinVal = Math.sin(this.state.imageRotation*(Math.PI/180));\n// var cosVal = Math.cos(this.state.imageRotation*(Math.PI/180));\n// var vecX = (this.state.imageWidth/2) - Math.round((this.state.imageWidth/2)*cosVal - (this.state.imageHeight/2)*sinVal);\n// var vecY = ((this.state.imageHeight/2) - Math.round((this.state.imageWidth/2)*sinVal + (this.state.imageHeight/2)*cosVal));\n\n// // Managing rotation and drawing\n// this.state.imageCanvasContext.translate(this.state.imagePositionX+vecX,this.state.imagePositionY+vecY);\n// this.state.imageCanvasContext.rotate(this.state.imageRotation*(Math.PI/180));\n// this.state.imageCanvasContext.translate(-this.state.imagePositionX-vecX,-this.state.imagePositionY-vecY);\n\n// // Draw uploaded image\n// this.state.imageCanvasContext.globalCompositeOperation=\"source-over\";\n// this.state.imageCanvasContext.drawImage(this.state.image,this.state.imagePositionX+vecX,this.state.imagePositionY+vecY,new_image_w,new_image_h);\n// // Draw drawCanvas on top of the uploaded image (override)\n// this.state.imageCanvasContext.globalCompositeOperation=\"destination-out\";\n// this.state.imageCanvasContext.drawImage(this.state.eraserDeeraserCanvasContext.canvas, 0, 0) //,this.state.imagePositionX+vecX,this.state.imagePositionY+vecY,new_image_w,new_image_h);\n// this.state.imageCanvasContext.globalCompositeOperation=\"source-over\";\n\n\n// this.state.imageCanvasContext.translate(this.state.imagePositionX+vecX,this.state.imagePositionY+vecY);\n// this.state.imageCanvasContext.rotate(-this.state.imageRotation*(Math.PI/180));\n// this.state.imageCanvasContext.translate(-this.state.imagePositionX-vecX,-this.state.imagePositionY-vecY);  "]},"metadata":{},"sourceType":"module"}