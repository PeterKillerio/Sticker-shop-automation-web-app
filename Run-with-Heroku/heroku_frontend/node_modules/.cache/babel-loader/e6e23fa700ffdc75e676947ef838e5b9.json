{"ast":null,"code":"var _jsxFileName = \"/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_StickerListing/App_StickerListingFilter.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport './App_StickerListingFilter.css'; // Import constants\n\nimport * as GLOBAL_CONSTANTS from '../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from './LocalConstants'; // Components\n\nimport StickerList from './App_StickerList';\nimport Filter from './App_Filter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HandleFilter(props) {\n  // This function has to be here because on load, filterOptions are not registered fast enough\n  // and as a result there are no default values set in the filter\n  if (props.filterOptionsParsed == true) {\n    return /*#__PURE__*/_jsxDEV(Filter, {\n      filterOptions: props.filterOptions,\n      onQueryChange: props.onQueryChange,\n      longestSidePick: props.longestSidePick,\n      onSliderChange: props.onSliderChange,\n      onFilterInputChange: props.onFilterInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  } else {\n    return null;\n  }\n}\n\n_c = HandleFilter;\n\nclass StickerListingFilter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      longestSidePick: 30,\n      // mm\n      URLParams: \"\",\n      filterOptionsParsed: false,\n      activeFilterOptions: [],\n      filterOptions: [],\n      stickerItems: []\n    };\n    this.initialQueryUpdate = this.initialQueryUpdate.bind(this);\n    this.onQueryChange = this.onQueryChange.bind(this);\n    this.updateStickersFromQueryString = this.updateStickersFromQueryString.bind(this);\n    this.updateQueryString = this.updateQueryString.bind(this);\n    this.getAndSetURLParams = this.getAndSetURLParams.bind(this);\n    this.onSliderChange = this.onSliderChange.bind(this);\n    this.recalculateStickerPrices = this.recalculateStickerPrices.bind(this);\n    this.initialSearchBoxFetch = this.initialSearchBoxFetch.bind(this);\n    this.onFilterInputChange = this.onFilterInputChange.bind(this);\n  } // Initial setup and an API call for sticker listings data\n\n\n  componentDidMount() {\n    // Read url query parameters and save them\n    this.initialQueryUpdate(); // Fetch initial batch of filter parameters\n\n    this.initialSearchBoxFetch(\"\");\n  }\n\n  getAndSetURLParams() {\n    // Loads URL and extracts query parameters, saves them to state and returns it\n    const URLParams = new URLSearchParams(window.location.search);\n    this.setState({\n      URLParams: URLParams\n    });\n    return URLParams;\n  }\n\n  updateQueryString(options) {\n    this.setState({\n      activeFilterOptions: options\n    });\n    console.log(\"updateQueryString options: \" + options); // Parse options to one query string\n\n    var names = \"\";\n    var tags = \"\";\n\n    for (var i = 0; i < options.length; i++) {\n      console.log(options[i].name + \"is iterating\");\n\n      if (options[i].type == \"tag\") {\n        if (tags != \"\") {\n          tags = tags + \"+\" + options[i].name;\n        } else {\n          tags = options[i].name;\n        }\n      } else if (options[i].type == \"name\") {\n        if (names != \"\") {\n          names = names + \"+\" + options[i].name;\n        } else {\n          names = options[i].name;\n        }\n      }\n    } //// Combine query parameters into one\n    // Add tags\n\n\n    var queryString = \"/\";\n\n    if (tags != \"\") {\n      queryString = \"?tags=\" + tags;\n    } // Add names\n\n\n    if (names != \"\") {\n      if (queryString != \"/\") {\n        queryString = queryString + \"&names=\" + names;\n      } else {\n        queryString = \"?names=\" + names;\n      }\n    } // Add longest side\n\n\n    if (queryString != \"/\") {\n      queryString = queryString + \"&longestside=\" + this.state.longestSidePick;\n    } else {\n      queryString = \"?longestside=\" + this.state.longestSidePick;\n    } // Change url query string (not reloading the page) \n\n\n    window.history.pushState({}, null, queryString); // Get URLParams object from url and save it to memory\n\n    var URLParams = this.getAndSetURLParams();\n    return URLParams;\n  }\n\n  recalculateStickerPrices(longestSidePick) {\n    let stickerItemsCopy = this.state.stickerItems;\n\n    for (let i = 0; i < this.state.stickerItems.length; i++) {\n      let priceRaw = longestSidePick * stickerItemsCopy[i][\"priceParameter\"];\n      stickerItemsCopy[i][\"price\"] = Math.round((priceRaw + Number.EPSILON) * 100) / 100;\n    }\n\n    this.setState({\n      stickerItems: stickerItemsCopy\n    });\n  }\n\n  updateStickersFromQueryString(URLParams) {\n    // API call: get sticker items based on the current URL query parameters\n    axios({\n      method: 'get',\n      url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.get_stickers + \"?\" + URLParams,\n      validateStatus: () => true\n    }).then(res => {\n      console.log(\"App_StickerListingFilter res: \" + JSON.stringify(res));\n\n      if (res.status != 200) {\n        // Invalid request\n        console.log(\"<WARNING:App_StickerListingFilter.js>: Invalid request.\");\n      } else {\n        // Valid request\n        console.log(\"<INFO:App_StickerListingFilter.js> Access token is valid.\");\n        this.setState({\n          stickerItems: res.data\n        }); //Calculate sticker prices\n\n        this.recalculateStickerPrices(this.state.longestSidePick);\n      }\n    });\n  } // Update query search parameters in the filter from url\n\n\n  initialQueryUpdate() {\n    // Read and save parameters\n    const URLParams = new URLSearchParams(window.location.search);\n    console.log(\"PARAMSS: \" + URLParams);\n    var urlNames = URLParams.get('names');\n    var urlTags = URLParams.get('tags');\n    var longestSidePick = URLParams.get('longestside');\n    console.log(\"urlNames: \" + urlNames);\n    console.log(\"urlTags: \" + urlTags); // Check if parameters are null before continuing, set to empty object if so\n\n    var stickerFilterOptions = [];\n\n    if (urlTags != null) {\n      urlTags = urlTags.split(' ');\n\n      for (var i = 0; i < Object.keys(urlTags).length; i++) {\n        stickerFilterOptions.push({\n          name: urlTags[i],\n          type: \"tag\",\n          count: 1\n        });\n      }\n    } //\n\n\n    if (urlNames != null) {\n      urlNames = urlNames.split(' ');\n\n      for (var i = 0; i < Object.keys(urlNames).length; i++) {\n        stickerFilterOptions.push({\n          name: urlNames[i],\n          type: \"name\",\n          count: 1\n        });\n      }\n    } // On load set slider side picker to url value\n\n\n    if (longestSidePick != null) {\n      this.setState({\n        longestSidePick: longestSidePick\n      });\n    }\n\n    this.setState({\n      activeFilterOptions: stickerFilterOptions,\n      filterOptions: stickerFilterOptions,\n      filterOptionsParsed: true,\n      URLParams: URLParams\n    }); // API call: get sticker items based on the current URL query parameters\n\n    this.updateStickersFromQueryString(URLParams);\n    return null;\n  }\n\n  onQueryChange(options) {\n    // This function is passed into the autocomplete component of mui and after user\n    // removes/adds new tag/name, this function will be called with options as a parameter\n    var newURLParams = this.updateQueryString(options); // API call: get sticker items based on the current URL query parameters\n\n    this.updateStickersFromQueryString(newURLParams);\n  }\n\n  onSliderChange(value) {\n    // This function is trigered each time a user changes (drags and drop) slider for picking\n    // longest side\n    this.setState({\n      longestSidePick: value\n    }); // Update query url\n\n    var newURLParams = this.updateQueryString(this.state.activeFilterOptions); // Update prices\n\n    this.recalculateStickerPrices(value);\n  }\n\n  onFilterInputChange(value) {\n    if (value.length >= LOCAL_CONSTANTS.ON_INPUT_FETCH_FILTER_OPTIONS_CHARACTER_LIMIT) {\n      this.initialSearchBoxFetch(value);\n    } else {\n      this.initialSearchBoxFetch(\"\");\n    }\n  }\n\n  initialSearchBoxFetch(value) {\n    // Fetch tags from server\n    axios({\n      method: 'get',\n      url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.get_tags,\n      headers: {},\n      params: {\n        text: value\n      },\n      validateStatus: () => true\n    }).then(res => {\n      console.log(\"App_StickerListingFilter resQQQQQQ: \" + JSON.stringify(res));\n\n      if (res.status != 200) {\n        // Invalid request\n        console.log(\"<WARNING:App_StickerListingFilter.js>: Invalid request.\");\n      } else {\n        // Valid request\n        console.log(\"<INFO:App_StickerListingFilter.js> Tag request is valid.\"); // Set these tags as available filter options\n\n        this.setState({\n          filterOptions: res.data\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(HandleFilter, {\n        filterOptionsParsed: this.state.filterOptionsParsed,\n        filterOptions: this.state.filterOptions,\n        longestSidePick: this.state.longestSidePick,\n        onQueryChange: this.onQueryChange,\n        onSliderChange: this.onSliderChange,\n        onFilterInputChange: this.onFilterInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StickerList, {\n        stickerItems: this.state.stickerItems,\n        favoriteStickersStyleOptionIds: this.props.favoriteStickersStyleOptionIds,\n        longestSidePick: this.state.longestSidePick // Favorites\n        ,\n        onAddStickerToFavorites: this.props.onAddStickerToFavorites,\n        onRemoveStickerFromFavorites: this.props.onRemoveStickerFromFavorites // Cart\n        ,\n        onAddStickerToCart: this.props.onAddStickerToCart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default StickerListingFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleFilter\");","map":{"version":3,"sources":["/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_StickerListing/App_StickerListingFilter.js"],"names":["React","axios","GLOBAL_CONSTANTS","LOCAL_CONSTANTS","StickerList","Filter","HandleFilter","props","filterOptionsParsed","filterOptions","onQueryChange","longestSidePick","onSliderChange","onFilterInputChange","StickerListingFilter","Component","constructor","state","URLParams","activeFilterOptions","stickerItems","initialQueryUpdate","bind","updateStickersFromQueryString","updateQueryString","getAndSetURLParams","recalculateStickerPrices","initialSearchBoxFetch","componentDidMount","URLSearchParams","window","location","search","setState","options","console","log","names","tags","i","length","name","type","queryString","history","pushState","stickerItemsCopy","priceRaw","Math","round","Number","EPSILON","method","url","API_CALL_BASE_URL","API_CALL_URLS","get_stickers","validateStatus","then","res","JSON","stringify","status","data","urlNames","get","urlTags","stickerFilterOptions","split","Object","keys","push","count","newURLParams","value","ON_INPUT_FETCH_FILTER_OPTIONS_CHARACTER_LIMIT","get_tags","headers","params","text","render","favoriteStickersStyleOptionIds","onAddStickerToFavorites","onRemoveStickerFromFavorites","onAddStickerToCart"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App_StickerListingFilter.css';\n\n// Import constants\nimport * as GLOBAL_CONSTANTS from '../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from './LocalConstants'\n\n// Components\nimport StickerList from './App_StickerList'\nimport Filter from './App_Filter'\n\nfunction HandleFilter(props){\n    // This function has to be here because on load, filterOptions are not registered fast enough\n    // and as a result there are no default values set in the filter\n    if(props.filterOptionsParsed == true){\n        return(\n            <Filter\n                filterOptions = {props.filterOptions}\n                onQueryChange={props.onQueryChange}\n                longestSidePick={props.longestSidePick}\n\n                onSliderChange={props.onSliderChange}\n                onFilterInputChange={props.onFilterInputChange}\n            />\n        );\n    }else{return(null);}\n}\n\nclass StickerListingFilter extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            longestSidePick: 30, // mm\n            URLParams: \"\",\n            filterOptionsParsed: false,\n            activeFilterOptions: [],\n            filterOptions: [],\n            stickerItems: [],\n        };\n        \n        this.initialQueryUpdate = this.initialQueryUpdate.bind(this);\n        this.onQueryChange = this.onQueryChange.bind(this);\n        this.updateStickersFromQueryString = this.updateStickersFromQueryString.bind(this);\n        this.updateQueryString = this.updateQueryString.bind(this);   \n        this.getAndSetURLParams = this.getAndSetURLParams.bind(this);   \n        this.onSliderChange = this.onSliderChange.bind(this);   \n        this.recalculateStickerPrices = this.recalculateStickerPrices.bind(this);   \n        this.initialSearchBoxFetch = this.initialSearchBoxFetch.bind(this);   \n        this.onFilterInputChange = this.onFilterInputChange.bind(this);        \n    }\n\n    // Initial setup and an API call for sticker listings data\n    componentDidMount(){\n        // Read url query parameters and save them\n        this.initialQueryUpdate();\n        // Fetch initial batch of filter parameters\n        this.initialSearchBoxFetch(\"\");\n    }\n\n    getAndSetURLParams(){\n        // Loads URL and extracts query parameters, saves them to state and returns it\n        const URLParams = new URLSearchParams(window.location.search);\n        this.setState({URLParams: URLParams});\n        return(URLParams);\n    }\n\n    updateQueryString(options){\n        this.setState({activeFilterOptions: options});\n        console.log(\"updateQueryString options: \" + options)\n\n        // Parse options to one query string\n        var names = \"\"\n        var tags = \"\"\n\n        for(var i = 0; i < options.length; i++){\n            console.log(options[i].name + \"is iterating\" )\n\n            if(options[i].type == \"tag\"){\n\n                if(tags != \"\"){\n                    tags = tags + \"+\" + options[i].name\n                }else{\n                    tags = options[i].name\n                }\n\n            }else if(options[i].type == \"name\"){\n                if(names != \"\"){\n                    names = names + \"+\" + options[i].name\n                }else{\n                    names = options[i].name\n                }\n            }\n        }\n\n        //// Combine query parameters into one\n        // Add tags\n        var queryString = \"/\"\n        if (tags != \"\"){\n            queryString = \"?tags=\" + tags \n        }\n        // Add names\n        if (names != \"\"){\n            if (queryString != \"/\"){\n                queryString = queryString + \"&names=\" + names\n            }else{\n                queryString = \"?names=\" + names \n            }\n        }\n        // Add longest side\n        if (queryString != \"/\"){\n            queryString = queryString + \"&longestside=\" + this.state.longestSidePick\n        }else{\n            queryString = \"?longestside=\" + this.state.longestSidePick \n        }\n        \n        // Change url query string (not reloading the page) \n        window.history.pushState({}, null, queryString);\n        // Get URLParams object from url and save it to memory\n        var URLParams = this.getAndSetURLParams();\n        return(URLParams);\n    }\n\n    recalculateStickerPrices(longestSidePick){\n        let stickerItemsCopy = this.state.stickerItems;\n        for(let i = 0; i < this.state.stickerItems.length; i++){\n            let priceRaw = longestSidePick*stickerItemsCopy[i][\"priceParameter\"];\n            stickerItemsCopy[i][\"price\"] = Math.round((priceRaw + Number.EPSILON) * 100) / 100;\n        }\n        this.setState({\n            stickerItems: stickerItemsCopy\n        });\n    }\n\n    updateStickersFromQueryString(URLParams){\n        // API call: get sticker items based on the current URL query parameters\n        axios({\n            method: 'get',\n            url:    GLOBAL_CONSTANTS.API_CALL_BASE_URL + \n                    LOCAL_CONSTANTS.API_CALL_URLS.get_stickers + \n                    \"?\"+URLParams,\n            validateStatus: () => true\n        }).then(res => {\n            console.log(\"App_StickerListingFilter res: \" + JSON.stringify(res))\n            if (res.status != 200){\n                // Invalid request\n                console.log(\"<WARNING:App_StickerListingFilter.js>: Invalid request.\")\n            }else{\n                // Valid request\n                console.log(\"<INFO:App_StickerListingFilter.js> Access token is valid.\")\n                this.setState({ stickerItems: res.data});\n                //Calculate sticker prices\n                this.recalculateStickerPrices(this.state.longestSidePick)\n            }\n        });\n    }\n\n    // Update query search parameters in the filter from url\n    initialQueryUpdate(){\n        // Read and save parameters\n        const URLParams = new URLSearchParams(window.location.search);\n        console.log(\"PARAMSS: \" + URLParams)\n        var urlNames = URLParams.get('names');\n        var urlTags = URLParams.get('tags');\n        var longestSidePick = URLParams.get('longestside');\n\n        console.log(\"urlNames: \" + urlNames)\n        console.log(\"urlTags: \" + urlTags)\n        \n        // Check if parameters are null before continuing, set to empty object if so\n        var stickerFilterOptions = [];\n        if(urlTags != null){\n            urlTags = urlTags.split(' ');\n            for(var i = 0; i < Object.keys(urlTags).length; i++){\n                stickerFilterOptions.push({name: urlTags[i], type: \"tag\", count: 1});\n            }\n        }\n        //\n        if(urlNames != null){\n            urlNames = urlNames.split(' ');\n            for(var i = 0; i < Object.keys(urlNames).length; i++){\n                stickerFilterOptions.push({name: urlNames[i], type: \"name\", count: 1});\n            }\n        }\n        // On load set slider side picker to url value\n        if(longestSidePick != null){\n            this.setState({longestSidePick: longestSidePick});\n        }\n\n        this.setState({\n            activeFilterOptions: stickerFilterOptions,\n            filterOptions: stickerFilterOptions,\n            filterOptionsParsed: true,\n            URLParams: URLParams,\n        });\n\n        // API call: get sticker items based on the current URL query parameters\n        this.updateStickersFromQueryString(URLParams);\n\n        return(null);\n    }\n\n\n    onQueryChange(options){\n        // This function is passed into the autocomplete component of mui and after user\n        // removes/adds new tag/name, this function will be called with options as a parameter\n        var newURLParams = this.updateQueryString(options);\n\n        // API call: get sticker items based on the current URL query parameters\n        this.updateStickersFromQueryString(newURLParams);\n    }\n\n    onSliderChange(value){\n        // This function is trigered each time a user changes (drags and drop) slider for picking\n        // longest side\n        this.setState({ longestSidePick: value });\n        // Update query url\n        var newURLParams = this.updateQueryString(this.state.activeFilterOptions);\n        // Update prices\n        this.recalculateStickerPrices(value);\n    }\n\n    onFilterInputChange(value){\n        if (value.length >= LOCAL_CONSTANTS.ON_INPUT_FETCH_FILTER_OPTIONS_CHARACTER_LIMIT){\n            this.initialSearchBoxFetch(value);\n        }else{\n            this.initialSearchBoxFetch(\"\");\n        }\n    }\n\n    initialSearchBoxFetch(value){\n        // Fetch tags from server\n        axios({\n            method: 'get',\n            url:    GLOBAL_CONSTANTS.API_CALL_BASE_URL + \n                    LOCAL_CONSTANTS.API_CALL_URLS.get_tags,\n            headers: {}, \n            params: {\n                text: value,\n            },\n            validateStatus: () => true\n        }).then(res => {\n            console.log(\"App_StickerListingFilter resQQQQQQ: \" + JSON.stringify(res))\n            if (res.status != 200){\n                // Invalid request\n                console.log(\"<WARNING:App_StickerListingFilter.js>: Invalid request.\")\n            }else{\n                // Valid request\n                console.log(\"<INFO:App_StickerListingFilter.js> Tag request is valid.\")\n                \n                // Set these tags as available filter options\n                this.setState({filterOptions: res.data});\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div>\n                <HandleFilter\n                    filterOptionsParsed={this.state.filterOptionsParsed}\n                    filterOptions={this.state.filterOptions}\n                    longestSidePick={this.state.longestSidePick}\n\n                    onQueryChange={this.onQueryChange}\n                    onSliderChange={this.onSliderChange}\n                    onFilterInputChange={this.onFilterInputChange}\n                />\n                \n                <StickerList\n                    stickerItems={this.state.stickerItems}\n                    favoriteStickersStyleOptionIds={this.props.favoriteStickersStyleOptionIds}\n                    longestSidePick={this.state.longestSidePick}\n                    // Favorites\n                    onAddStickerToFavorites={this.props.onAddStickerToFavorites}\n                    onRemoveStickerFromFavorites={this.props.onRemoveStickerFromFavorites}\n                    // Cart\n                    onAddStickerToCart={this.props.onAddStickerToCart}\n                />\n            </div>\n        );\n    }    \n}\n\nexport default StickerListingFilter"]},"metadata":{},"sourceType":"module"}