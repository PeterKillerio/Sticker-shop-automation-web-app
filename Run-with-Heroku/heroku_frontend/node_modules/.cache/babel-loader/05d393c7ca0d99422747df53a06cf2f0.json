{"ast":null,"code":"var _jsxFileName = \"/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_Navigation/Popups/Builder/App_Navigation_PopupFormBuilder.js\";\nimport React from 'react';\nimport './App_Navigation_PopupFormBuilder.css';\nimport axios from 'axios'; // MUI\n\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button'; // Import constants\n\nimport * as GLOBAL_CONSTANTS from '../../../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from '../../LocalContants'; // Popups by type\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PopupFormBuilder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: props.type,\n      onCloseClick: props.onCloseClick,\n      onForgotPasswordClick: props.onForgotPasswordClick,\n      popupErrorInfoText: \"\",\n      popupErrorUsername: \"\",\n      popupErrorEmail: \"\",\n      popupErrorPassword: \"\",\n      // Form handling data\n      username: '',\n      // used to represent username & email (for login)\n      email: '',\n      password: '',\n      // Registration-relevant\n      onSuccessfulRegistration: props.onSuccessfulRegistration\n    };\n    this.loginSubmit = this.loginSubmit.bind(this);\n    this.changePopupErrorText = this.changePopupErrorText.bind(this);\n  }\n\n  handleInputChange(event, stateName) {\n    this.setState({\n      [stateName]: event.target.value\n    });\n    console.log(\"!!!!!!!\" + stateName);\n  }\n\n  changePopupErrorText(errorVariable, text) {\n    this.setState({\n      [errorVariable]: text\n    });\n    return null;\n  }\n\n  resetPopupErrorTexts() {\n    this.setState({\n      popupErrorInfoText: \"\",\n      popupErrorUsername: \"\",\n      popupErrorEmail: \"\",\n      popupErrorPassword: \"\"\n    });\n    return null;\n  }\n\n  loginSubmit(event) {\n    event.preventDefault();\n    axios({\n      method: 'post',\n      url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.login_call,\n      headers: {},\n      data: {\n        email: this.state.username,\n        password: this.state.password\n      },\n      validateStatus: () => true\n    }).then(res => {\n      console.log(\"Login: \" + JSON.stringify(res, null, 2));\n\n      if (res.status != 200 && res.status != 201 || res.code == \"token_not_valid\") {\n        console.log(\"<ERROR:App_SetTokensOnVisit.js>: Login is invalid.\"); // Inform user\n\n        this.changePopupErrorText(\"popupErrorInfoText\", res.data.non_field_errors);\n      } else {\n        // Valid login\n        // Set tokens, temp_user variable\n        localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token, res.data.access);\n        localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token, res.data.refresh);\n        localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.is_temp, false);\n        console.log(\"<INFO:App_Navigation_PopupFormBuilder.js> Valid login.\"); // Save username\n\n        localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.username, res.data.username);\n        window.location.reload(); // Reload site\n      }\n    });\n  }\n\n  registerSubmit(event) {\n    event.preventDefault();\n    axios({\n      method: 'post',\n      url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.register_call,\n      headers: {},\n      data: {\n        username: this.state.username,\n        email: this.state.email,\n        password: this.state.password\n      },\n      validateStatus: () => true\n    }).then(res => {\n      console.log(\"Register: \" + JSON.stringify(res));\n\n      if (res.status != 200 && res.status != 201 || res.code == \"token_not_valid\") {\n        console.log(\"<ERROR:App_SetTokensOnVisit.js>: Registration is invalid.\"); // Set error messages appropriatelly \n\n        if (res.data.username) {\n          this.changePopupErrorText(\"popupErrorUsername\", res.data.username);\n        }\n\n        if (res.data.email) {\n          this.changePopupErrorText(\"popupErrorEmail\", res.data.email);\n        }\n\n        if (res.data.password) {\n          this.changePopupErrorText(\"popupErrorPassword\", res.data.password);\n        } // Inform user\n\n\n        this.changePopupErrorText(\"popupErrorInfoText\", res.data.non_field_errors);\n      } else {\n        // Valid registration\n        console.log(\"<INFO:App_Navigation_PopupFormBuilder.js> Valid registration.\"); // Close registartion window, open login window\n\n        this.state.onSuccessfulRegistration();\n      }\n    });\n  }\n\n  render() {\n    // Each popup has its own return function\n    if (this.state.type == \"login\") {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        className: \"popupOuterContainer\",\n        container: true,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        style: {\n          color: GLOBAL_CONSTANTS.COLORS.colorB\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          xs: 12,\n          className: \"popupInnerContainerWrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: event => {\n              this.loginSubmit(event);\n              this.resetPopupErrorTexts();\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              className: \"popupInnerContainer\",\n              container: true,\n              style: {\n                backgroundColor: GLOBAL_CONSTANTS.COLORS.colorA\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"closePopupButton\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: this.state.onCloseClick,\n                  style: {\n                    color: \"inherit\"\n                  },\n                  size: \"large\",\n                  \"aria-label\": \"delete\",\n                  children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n                    name: \"close-outline\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"login\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"textFieldWrapper\",\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    sx: {\n                      input: {\n                        color: GLOBAL_CONSTANTS.COLORS.colorB\n                      }\n                    },\n                    required: true,\n                    id: \"outlined-required\",\n                    label: \"username/email\",\n                    focused: true,\n                    onChange: event => this.handleInputChange(event, \"username\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"textFieldWrapper\",\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    sx: {\n                      input: {\n                        color: GLOBAL_CONSTANTS.COLORS.colorB\n                      }\n                    },\n                    required: true,\n                    id: \"outlined-required\",\n                    label: \"password\",\n                    variant: \"outlined\",\n                    type: \"password\",\n                    focused: true,\n                    onChange: event => this.handleInputChange(event, \"password\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: this.state.onForgotPasswordClick,\n                  variant: \"text\",\n                  children: \"forgot password?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"popupErrorInfoText\",\n                  style: {\n                    color: GLOBAL_CONSTANTS.COLORS.colorC\n                  },\n                  children: this.state.popupErrorInfoText\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"text\",\n                  style: {\n                    border: '1px solid ' + GLOBAL_CONSTANTS.COLORS.colorB\n                  },\n                  type: \"submit\",\n                  children: \"login\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.type == \"register\") {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        className: \"popupOuterContainer\",\n        container: true,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        style: {\n          color: GLOBAL_CONSTANTS.COLORS.colorB\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          xs: 12,\n          className: \"popupInnerContainerWrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: event => {\n              this.registerSubmit(event);\n              this.resetPopupErrorTexts();\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              className: \"popupInnerContainer\",\n              container: true,\n              style: {\n                backgroundColor: GLOBAL_CONSTANTS.COLORS.colorA\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"closePopupButton\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: this.state.onCloseClick,\n                  style: {\n                    color: \"inherit\"\n                  },\n                  size: \"large\",\n                  \"aria-label\": \"delete\",\n                  children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n                    name: \"close-outline\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"register\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"popupErrorInfoText\",\n                  style: {\n                    color: GLOBAL_CONSTANTS.COLORS.colorC,\n                    textAlign: 'center'\n                  },\n                  children: this.state.popupErrorUsername\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"textFieldWrapper\",\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    sx: {\n                      input: {\n                        color: GLOBAL_CONSTANTS.COLORS.colorB\n                      }\n                    },\n                    required: true,\n                    id: \"outlined-required\",\n                    label: \"username\",\n                    focused: true,\n                    onChange: event => this.handleInputChange(event, \"username\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"popupErrorInfoText\",\n                  style: {\n                    color: GLOBAL_CONSTANTS.COLORS.colorC\n                  },\n                  children: this.state.popupErrorEmail\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"textFieldWrapper\",\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    sx: {\n                      input: {\n                        color: GLOBAL_CONSTANTS.COLORS.colorB\n                      }\n                    },\n                    required: true,\n                    id: \"outlined-required\",\n                    label: \"email\",\n                    focused: true,\n                    onChange: event => this.handleInputChange(event, \"email\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 261,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"popupErrorInfoText\",\n                  style: {\n                    color: GLOBAL_CONSTANTS.COLORS.colorC\n                  },\n                  children: this.state.popupErrorPassword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"textFieldWrapper\",\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    sx: {\n                      input: {\n                        color: GLOBAL_CONSTANTS.COLORS.colorB\n                      }\n                    },\n                    required: true,\n                    id: \"outlined-required\",\n                    label: \"password\",\n                    variant: \"outlined\",\n                    type: \"password\",\n                    focused: true,\n                    onChange: event => this.handleInputChange(event, \"password\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"text\",\n                  style: {\n                    border: '1px solid ' + GLOBAL_CONSTANTS.COLORS.colorB\n                  },\n                  type: \"submit\",\n                  children: \"register\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.type == \"resetpassword\") {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        className: \"popupOuterContainer\",\n        container: true,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        style: {\n          color: GLOBAL_CONSTANTS.COLORS.colorB\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          xs: 12,\n          className: \"popupInnerContainerWrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              className: \"popupInnerContainer\",\n              container: true,\n              style: {\n                backgroundColor: GLOBAL_CONSTANTS.COLORS.colorA\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"closePopupButton\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: this.state.onCloseClick,\n                  style: {\n                    color: \"inherit\"\n                  },\n                  size: \"large\",\n                  \"aria-label\": \"delete\",\n                  children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n                    name: \"close-outline\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 324,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"reset password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"textFieldWrapper\",\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    sx: {\n                      input: {\n                        color: GLOBAL_CONSTANTS.COLORS.colorB\n                      }\n                    },\n                    required: true,\n                    id: \"outlined-required\",\n                    label: \"email\",\n                    focused: true,\n                    onChange: event => this.handleInputChange(event, \"email\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"text\",\n                  style: {\n                    border: '1px solid ' + GLOBAL_CONSTANTS.COLORS.colorB\n                  },\n                  children: \"send password reset link\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wrong popup type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n}\n\nexport default PopupFormBuilder;","map":{"version":3,"sources":["/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_Navigation/Popups/Builder/App_Navigation_PopupFormBuilder.js"],"names":["React","axios","Grid","IconButton","TextField","Button","GLOBAL_CONSTANTS","LOCAL_CONSTANTS","PopupFormBuilder","Component","constructor","props","state","type","onCloseClick","onForgotPasswordClick","popupErrorInfoText","popupErrorUsername","popupErrorEmail","popupErrorPassword","username","email","password","onSuccessfulRegistration","loginSubmit","bind","changePopupErrorText","handleInputChange","event","stateName","setState","target","value","console","log","errorVariable","text","resetPopupErrorTexts","preventDefault","method","url","API_CALL_BASE_URL","API_CALL_URLS","login_call","headers","data","validateStatus","then","res","JSON","stringify","status","code","non_field_errors","localStorage","setItem","LOCAL_STORAGE","access_token","access","refresh_token","refresh","is_temp","window","location","reload","registerSubmit","register_call","render","color","COLORS","colorB","backgroundColor","colorA","input","colorC","border","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App_Navigation_PopupFormBuilder.css';\nimport axios from 'axios';\n\n// MUI\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\n// Import constants\nimport * as GLOBAL_CONSTANTS from '../../../../GlobalConstants'\nimport * as LOCAL_CONSTANTS from '../../LocalContants'\n\n// Popups by type\nclass PopupFormBuilder extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            type: props.type,\n\n            onCloseClick: props.onCloseClick,\n            onForgotPasswordClick: props.onForgotPasswordClick,\n\n            popupErrorInfoText: \"\",\n            popupErrorUsername: \"\",\n            popupErrorEmail: \"\",\n            popupErrorPassword: \"\",\n\n            // Form handling data\n            username: '', // used to represent username & email (for login)\n            email: '',\n            password: '',\n\n            // Registration-relevant\n            onSuccessfulRegistration: props.onSuccessfulRegistration,\n        };\n        this.loginSubmit = this.loginSubmit.bind(this);\n        this.changePopupErrorText = this.changePopupErrorText.bind(this);\n\n    }\n\n    handleInputChange(event, stateName) { this.setState({[stateName]:event.target.value});  console.log(\"!!!!!!!\"+ stateName);}\n\n    changePopupErrorText(errorVariable, text){\n        this.setState({[errorVariable]: text});\n        return(null);\n    }\n    resetPopupErrorTexts(){\n        this.setState({ popupErrorInfoText: \"\",\n                        popupErrorUsername: \"\",\n                        popupErrorEmail: \"\",\n                        popupErrorPassword: \"\"});\n        return(null);\n    }\n\n    loginSubmit(event){\n        event.preventDefault();\n\n        axios({\n            method: 'post',\n            url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.login_call,\n            headers: {}, \n            data: {\n                email: this.state.username,\n                password: this.state.password,\n            },\n            validateStatus: () => true\n        }).then(res => {\n            console.log(\"Login: \" + JSON.stringify(res, null, 2));\n            if ((res.status != 200 && res.status != 201) || res.code == \"token_not_valid\"){\n                console.log(\"<ERROR:App_SetTokensOnVisit.js>: Login is invalid.\");\n                // Inform user\n                this.changePopupErrorText(\"popupErrorInfoText\", res.data.non_field_errors);\n\n            }else{ // Valid login\n                // Set tokens, temp_user variable\n                localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token, res.data.access);\n                localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token, res.data.refresh);\n                localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.is_temp, false);\n                console.log(\"<INFO:App_Navigation_PopupFormBuilder.js> Valid login.\");\n                // Save username\n                localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.username, res.data.username);\n\n                window.location.reload(); // Reload site\n            }\n        });\n    }\n\n    registerSubmit(event){\n        event.preventDefault();\n\n        axios({\n            method: 'post',\n            url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.register_call,\n            headers: {}, \n            data: {\n                username: this.state.username,\n                email: this.state.email,\n                password: this.state.password,\n            },\n            validateStatus: () => true\n        }).then(res => {\n            console.log(\"Register: \" + JSON.stringify(res));\n            if ((res.status != 200 && res.status != 201) || res.code == \"token_not_valid\"){\n                console.log(\"<ERROR:App_SetTokensOnVisit.js>: Registration is invalid.\");\n\n                // Set error messages appropriatelly \n                if (res.data.username){this.changePopupErrorText(\"popupErrorUsername\", res.data.username);}\n                if (res.data.email){this.changePopupErrorText(\"popupErrorEmail\", res.data.email);}\n                if (res.data.password){this.changePopupErrorText(\"popupErrorPassword\", res.data.password);}\n\n                // Inform user\n                this.changePopupErrorText(\"popupErrorInfoText\", res.data.non_field_errors);\n            }else{ // Valid registration\n                console.log(\"<INFO:App_Navigation_PopupFormBuilder.js> Valid registration.\");\n                // Close registartion window, open login window\n                this.state.onSuccessfulRegistration();\n            }\n        });\n    }\n    \n    render(){\n        // Each popup has its own return function\n        if (this.state.type == \"login\"){\n            return(\n                <Grid   className='popupOuterContainer' \n                        container \n                        justifyContent=\"center\" \n                        alignItems=\"center\"\n                        style={{color: GLOBAL_CONSTANTS.COLORS.colorB}}\n                        >\n        \n                    <Grid xs={12} className='popupInnerContainerWrapper'> \n                        <form onSubmit={(event) => { this.loginSubmit(event); this.resetPopupErrorTexts(); }}>\n                            <Grid   className='popupInnerContainer' container\n                                    style={{backgroundColor: GLOBAL_CONSTANTS.COLORS.colorA}}>\n        \n                                <div className='closePopupButton'>\n                                    <IconButton onClick={this.state.onCloseClick} style={{color: \"inherit\"}} size='large' aria-label=\"delete\">\n                                        <ion-icon name=\"close-outline\"></ion-icon>\n                                    </IconButton>\n                                </div> \n        \n                                <Grid xs={12}> \n                                    <h3>login</h3>\n                                </Grid>\n                                \n        \n                                <Grid xs={12}> \n                                    <div className='textFieldWrapper'>\n                                        <TextField\n                                            sx={{ input: { color: GLOBAL_CONSTANTS.COLORS.colorB } }}\n                                            required\n                                            id=\"outlined-required\"\n                                            label=\"username/email\"\n                                            focused\n                                            onChange={(event) => this.handleInputChange(event,\"username\")}\n                                        />\n                                    </div>\n                                </Grid>\n        \n                                <Grid xs={12}> \n                                    <div className='textFieldWrapper'>\n                                        <TextField \n                                            sx={{ input: { color: GLOBAL_CONSTANTS.COLORS.colorB } }}\n                                            required\n                                            id=\"outlined-required\"\n                                            label=\"password\" \n                                            variant=\"outlined\"\n                                            type=\"password\"\n                                            focused\n                                            onChange={(event) => this.handleInputChange(event,\"password\")}\n                                            />\n                                    </div>\n                                </Grid>\n        \n                                <Grid xs={12}> \n                                    <Button onClick={this.state.onForgotPasswordClick} variant=\"text\">\n                                        forgot password?\n                                    </Button>\n                                </Grid>\n\n                                {/* Inform user on invalid login */}\n                                <Grid xs={12}> \n                                    <p  className='popupErrorInfoText' \n                                        style={{color: GLOBAL_CONSTANTS.COLORS.colorC}}>\n                                        {this.state.popupErrorInfoText}\n                                    </p>\n                                </Grid>\n\n                                <Grid xs={12}>\n                                    <Button variant=\"text\"\n                                        style={{border: '1px solid ' + GLOBAL_CONSTANTS.COLORS.colorB}}\n                                        type=\"submit\">\n                                        login\n                                    </Button>\n                                    \n                                </Grid>\n        \n                            </Grid>\n                        </form>\n                    </Grid>\n                </Grid>\n            );\n        }else if (this.state.type == \"register\"){\n            return(\n                <Grid   className='popupOuterContainer' \n                        container \n                        justifyContent=\"center\" \n                        alignItems=\"center\"\n                        style={{color: GLOBAL_CONSTANTS.COLORS.colorB}}\n                        >\n        \n                    <Grid xs={12} className='popupInnerContainerWrapper'> \n                        <form onSubmit={(event) => { this.registerSubmit(event); this.resetPopupErrorTexts(); }}>\n                            <Grid   className='popupInnerContainer' container\n                                    style={{backgroundColor: GLOBAL_CONSTANTS.COLORS.colorA}}>\n        \n                                <div className='closePopupButton'>\n                                    <IconButton onClick={this.state.onCloseClick} style={{color: \"inherit\"}} size='large' aria-label=\"delete\">\n                                        <ion-icon name=\"close-outline\"></ion-icon>\n                                    </IconButton>\n                                </div> \n        \n                                <Grid xs={12}> \n                                    <h3>register</h3>\n                                </Grid>\n\n                                {/* Inform user on invalid username */}\n                                <Grid xs={12}> \n                                    <p  className='popupErrorInfoText' \n                                        style={{color: GLOBAL_CONSTANTS.COLORS.colorC, textAlign: 'center'}}>\n                                        {this.state.popupErrorUsername}\n                                    </p>\n                                </Grid>\n        \n                                <Grid xs={12}> \n                                    <div className='textFieldWrapper'>\n                                        <TextField\n                                            sx={{ input: { color: GLOBAL_CONSTANTS.COLORS.colorB } }}\n                                            required\n                                            id=\"outlined-required\"\n                                            label=\"username\"\n                                            focused\n                                            onChange={(event) => this.handleInputChange(event,\"username\")}\n                                        />\n                                    </div>\n                                </Grid>\n\n                                {/* Inform user on invalid email */}\n                                <Grid xs={12}> \n                                    <p  className='popupErrorInfoText' \n                                        style={{color: GLOBAL_CONSTANTS.COLORS.colorC}}>\n                                        {this.state.popupErrorEmail}\n                                    </p>\n                                </Grid>\n\n                                <Grid xs={12}> \n                                    <div className='textFieldWrapper'>\n                                        <TextField\n                                            sx={{ input: { color: GLOBAL_CONSTANTS.COLORS.colorB } }}\n                                            required\n                                            id=\"outlined-required\"\n                                            label=\"email\"\n                                            focused\n                                            onChange={(event) => this.handleInputChange(event,\"email\")}\n                                        />\n                                    </div>\n                                </Grid>\n\n                                {/* Inform user on invalid password */}\n                                <Grid xs={12}> \n                                    <p  className='popupErrorInfoText' \n                                        style={{color: GLOBAL_CONSTANTS.COLORS.colorC}}>\n                                        {this.state.popupErrorPassword}\n                                    </p>\n                                </Grid>\n        \n                                <Grid xs={12}> \n                                    <div className='textFieldWrapper'>\n                                        <TextField \n                                            sx={{ input: { color: GLOBAL_CONSTANTS.COLORS.colorB } }}\n                                            required\n                                            id=\"outlined-required\"\n                                            label=\"password\" \n                                            variant=\"outlined\"\n                                            type=\"password\"\n                                            focused\n                                            onChange={(event) => this.handleInputChange(event,\"password\")}\n                                            />\n                                    </div>\n                                </Grid>\n        \n                                <Grid xs={12}> \n                                    <Button variant=\"text\"\n                                        style={{border: '1px solid ' + GLOBAL_CONSTANTS.COLORS.colorB}}\n                                        type=\"submit\">\n                                        register\n                                    </Button>\n                                </Grid>\n        \n                            </Grid>\n                        </form>\n                    </Grid>\n                </Grid>\n            );\n        }else if (this.state.type == \"resetpassword\"){\n            return(\n                <Grid   className='popupOuterContainer' \n                        container \n                        justifyContent=\"center\" \n                        alignItems=\"center\"\n                        style={{color: GLOBAL_CONSTANTS.COLORS.colorB}}\n                        >\n        \n                    <Grid xs={12} className='popupInnerContainerWrapper'> \n                        <form>\n                            <Grid   className='popupInnerContainer' container\n                                    style={{backgroundColor: GLOBAL_CONSTANTS.COLORS.colorA}}>\n        \n                                <div className='closePopupButton'>\n                                    <IconButton onClick={this.state.onCloseClick} style={{color: \"inherit\"}} size='large' aria-label=\"delete\">\n                                        <ion-icon name=\"close-outline\"></ion-icon>\n                                    </IconButton>\n                                </div> \n        \n                                <Grid xs={12}> \n                                    <h3>reset password</h3>\n                                </Grid>\n        \n                                <Grid xs={12}> \n                                    <div className='textFieldWrapper'>\n                                        <TextField\n                                            sx={{ input: { color: GLOBAL_CONSTANTS.COLORS.colorB } }}\n                                            required\n                                            id=\"outlined-required\"\n                                            label=\"email\"\n                                            focused\n                                            onChange={(event) => this.handleInputChange(event,\"email\")}\n                                        />\n                                    </div>\n                                </Grid>\n        \n                                <Grid xs={12}> \n                                    <Button variant=\"text\"\n                                        style={{border: '1px solid ' + GLOBAL_CONSTANTS.COLORS.colorB}}>\n                                        send password reset link\n                                    </Button>\n                                </Grid>\n        \n                            </Grid>\n                        </form>\n                    </Grid>\n                </Grid>\n            );\n        }else{\n            return <h1>Wrong popup type</h1>\n        }  \n    }  \n}\n\nexport default PopupFormBuilder"]},"metadata":{},"sourceType":"module"}