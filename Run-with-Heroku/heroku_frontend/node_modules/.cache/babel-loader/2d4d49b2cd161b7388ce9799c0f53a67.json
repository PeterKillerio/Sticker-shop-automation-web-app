{"ast":null,"code":"var _jsxFileName = \"/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_StickerPage/App_StickerPageOptions.js\";\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useSearchParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './App_StickerPageOptions.css';\nimport mergeImages from 'merge-images';\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\"; // MUI\n\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Input from '@mui/material/Input'; // Import constants\n\nimport * as GLOBAL_CONSTANTS from '../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from './LocalConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  disabledButton: {\n    backgroundColor: theme.palette.secondary || 'red'\n  }\n});\n\nfunction StickerPageOptions(props) {\n  function sliderValueText(value) {\n    // Slider value floating text \n    return `${value} mm`;\n  }\n\n  if (props.stickerData != null) {\n    // Variables\n    var materialOption = props.stickerData.material_options[props.currentSelectedMaterialIndex];\n    var styleOption = props.stickerData.material_options[props.currentSelectedMaterialIndex].style_options[props.currentSelectedStyleOptionIndex]; // Favorite button handler\n\n    const favoriteButton = () => {\n      // Check if item is already a favorite\n      let isFavorite = false;\n      var stickerStyleOptionId = styleOption.style_option_id;\n\n      if (props.favoriteStickersStyleOptionIds.includes(stickerStyleOptionId)) {\n        isFavorite = true;\n      } // Return buttons with different functions and styling if the sticker is in favorites\n\n\n      if (isFavorite) {\n        return /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => {\n            props.onRemoveStickerFromFavorites(stickerStyleOptionId);\n          },\n          children: \"Remove from favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: () => {\n            props.onAddStickerToFavorites(stickerStyleOptionId);\n          },\n          children: \"Add to favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this);\n      }\n    }; // Min and max slide size picker values\n\n\n    const sizeSlideMax = styleOption.maximal_side_length_mm; // What would be min for largest side if we set our smallest side to min\n\n    const sizeSlideMin = Math.ceil(Math.max(styleOption.aspect_ratio, 1 / styleOption.aspect_ratio) * styleOption.minimal_side_length_mm);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stickerPageSideWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stickerPageSide rightSideWrapper\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: props.stickerData.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Material Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            className: \"stickerPageButtonWrapper\",\n            xs: 12,\n            children: props.stickerData.material_options.map((materialOption, index) => index == props.currentSelectedMaterialIndex ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: () => props.onMaterialOptionClick(index),\n              children: materialOption.material_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              onClick: () => props.onMaterialOptionClick(index),\n              children: materialOption.material_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 40\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Style Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            className: \"stickerPageButtonWrapper\",\n            xs: 12,\n            children: materialOption.style_options.map((styleOption, index) => index == props.currentSelectedStyleOptionIndex ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: () => props.onStyleOptionClick(index),\n              children: styleOption.style_option_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              onClick: () => props.onStyleOptionClick(index),\n              children: styleOption.style_option_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 40\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Size: width x height\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              disabled: true,\n              value: props.stickerWidthmm + \"mm x \" + props.stickerHeightmm + \"mm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Slider // className=\"sideSlider\"\n            , {\n              \"aria-label\": \"Longest side picker\",\n              defaultValue: props.currentSelectedLongestSidePick,\n              valueLabelFormat: sliderValueText,\n              step: 1,\n              marks: true,\n              min: sizeSlideMin,\n              max: sizeSlideMax,\n              valueLabelDisplay: \"auto\",\n              onChangeCommitted: (event, value) => props.onSizeSliderChange(value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"filled-number\",\n              type: \"number\",\n              defaultValue: props.currentStickerAmount,\n              value: props.currentStickerAmount,\n              InputLabelProps: {\n                shrink: true\n              },\n              InputProps: {\n                inputProps: {\n                  min: 1\n                },\n                style: {\n                  color: GLOBAL_CONSTANTS.COLORS.colorB\n                }\n              },\n              focused: true,\n              variant: \"filled\",\n              onChange: event => props.onStickerAmountChange(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [props.currentStickerPrice, \" \\u20AC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            className: \"stickerPageButtonWrapper\",\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              onClick: () => {\n                props.onAddStickerToCart(styleOption.style_option_id, props.currentStickerAmount, props.currentSelectedLongestSidePick);\n              },\n              children: \"Buy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 29\n            }, this), favoriteButton()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  } else {\n    return null;\n  }\n}\n\n_c = StickerPageOptions;\nexport default StickerPageOptions;\n\nvar _c;\n\n$RefreshReg$(_c, \"StickerPageOptions\");","map":{"version":3,"sources":["/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_StickerPage/App_StickerPageOptions.js"],"names":["React","useEffect","ReactDOM","useSearchParams","axios","mergeImages","BrowserRouter","Router","Switch","Route","Link","useParams","Grid","Slider","TextField","Button","ThemeProvider","createTheme","Input","GLOBAL_CONSTANTS","LOCAL_CONSTANTS","styles","theme","disabledButton","backgroundColor","palette","secondary","StickerPageOptions","props","sliderValueText","value","stickerData","materialOption","material_options","currentSelectedMaterialIndex","styleOption","style_options","currentSelectedStyleOptionIndex","favoriteButton","isFavorite","stickerStyleOptionId","style_option_id","favoriteStickersStyleOptionIds","includes","onRemoveStickerFromFavorites","onAddStickerToFavorites","sizeSlideMax","maximal_side_length_mm","sizeSlideMin","Math","ceil","max","aspect_ratio","minimal_side_length_mm","description","map","index","onMaterialOptionClick","material_name","onStyleOptionClick","style_option_name","stickerWidthmm","stickerHeightmm","currentSelectedLongestSidePick","event","onSizeSliderChange","currentStickerAmount","shrink","inputProps","min","style","color","COLORS","colorB","onStickerAmountChange","target","currentStickerPrice","onAddStickerToCart"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,8BAAP;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,SACIC,aAAa,IAAIC,MADrB,EAEIC,MAFJ,EAGIC,KAHJ,EAIIC,IAJJ,EAKIC,SALJ,QAMS,kBANT,C,CAQA;;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,sBAA3C;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CAEA;;AACA,OAAO,KAAKC,gBAAZ,MAAkC,uBAAlC;AACA,OAAO,KAAKC,eAAZ,MAAiC,kBAAjC;;;AAGC,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACtBC,EAAAA,cAAc,EAAE;AACdC,IAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,SAAd,IAA2B;AAD9B;AADM,CAAL,CAApB;;AAMD,SAASC,kBAAT,CAA4BC,KAA5B,EAAkC;AAC9B,WAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B;AACA,WAAQ,GAAEA,KAAM,KAAhB;AACH;;AAED,MAAIF,KAAK,CAACG,WAAN,IAAqB,IAAzB,EAA8B;AAC1B;AACA,QAAIC,cAAc,GAAGJ,KAAK,CAACG,WAAN,CAAkBE,gBAAlB,CAAmCL,KAAK,CAACM,4BAAzC,CAArB;AACA,QAAIC,WAAW,GAAGP,KAAK,CAACG,WAAN,CAAkBE,gBAAlB,CAAmCL,KAAK,CAACM,4BAAzC,EAAuEE,aAAvE,CAAqFR,KAAK,CAACS,+BAA3F,CAAlB,CAH0B,CAK1B;;AACA,UAAMC,cAAc,GAAG,MAAI;AACvB;AACA,UAAIC,UAAU,GAAG,KAAjB;AACA,UAAIC,oBAAoB,GAAGL,WAAW,CAACM,eAAvC;;AACA,UAAIb,KAAK,CAACc,8BAAN,CAAqCC,QAArC,CAA8CH,oBAA9C,CAAJ,EAAwE;AACpED,QAAAA,UAAU,GAAG,IAAb;AACH,OANsB,CAOvB;;;AACA,UAAIA,UAAJ,EAAe;AACX,4BACI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AACQ,UAAA,OAAO,EAAE,MAAM;AAACX,YAAAA,KAAK,CAACgB,4BAAN,CAAmCJ,oBAAnC;AAAyD,WADjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMH,OAPD,MAQI;AACA,4BACI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,UAAhB;AACQ,UAAA,OAAO,EAAE,MAAM;AAACZ,YAAAA,KAAK,CAACiB,uBAAN,CAA8BL,oBAA9B;AAAoD,WAD5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMH;AACJ,KAxBD,CAN0B,CAgC1B;;;AACA,UAAMM,YAAY,GAAGX,WAAW,CAACY,sBAAjC,CAjC0B,CAkC1B;;AACA,UAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAAShB,WAAW,CAACiB,YAArB,EAAmC,IAAEjB,WAAW,CAACiB,YAAjD,IAA+DjB,WAAW,CAACkB,sBAArF,CAArB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,kCAAf;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAgB,UAAA,cAAc,EAAC,MAA/B;AAAA,kCACI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,mCAEI;AAAA,wBAAIzB,KAAK,CAACG,WAAN,CAAkBuB;AAAtB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,mCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBALJ,eASI,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,0BAAhB;AAA2C,YAAA,EAAE,EAAE,EAA/C;AAAA,sBAGK1B,KAAK,CAACG,WAAN,CAAkBE,gBAAlB,CAAmCsB,GAAnC,CAAuC,CAACvB,cAAD,EAAiBwB,KAAjB,KAEpCA,KAAK,IAAI5B,KAAK,CAACM,4BAAf,gBACO,QAAC,MAAD;AACS,cAAA,OAAO,EAAC,WADjB;AAES,cAAA,OAAO,EAAE,MAAMN,KAAK,CAAC6B,qBAAN,CAA4BD,KAA5B,CAFxB;AAAA,wBAGOxB,cAAc,CAAC0B;AAHtB;AAAA;AAAA;AAAA;AAAA,oBADP,gBAMO,QAAC,MAAD;AAAS,cAAA,OAAO,EAAC,UAAjB;AACS,cAAA,OAAO,EAAE,MAAM9B,KAAK,CAAC6B,qBAAN,CAA4BD,KAA5B,CADxB;AAAA,wBAEOxB,cAAc,CAAC0B;AAFtB;AAAA;AAAA;AAAA;AAAA,oBARV;AAHL;AAAA;AAAA;AAAA;AAAA,kBATJ,eA4BI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,mCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBA5BJ,eAgCI,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,0BAAhB;AAA0C,YAAA,EAAE,EAAE,EAA9C;AAAA,sBACK1B,cAAc,CAACI,aAAf,CAA6BmB,GAA7B,CAAiC,CAACpB,WAAD,EAAcqB,KAAd,KAE9BA,KAAK,IAAI5B,KAAK,CAACS,+BAAf,gBACO,QAAC,MAAD;AAAS,cAAA,OAAO,EAAC,WAAjB;AACS,cAAA,OAAO,EAAE,MAAMT,KAAK,CAAC+B,kBAAN,CAAyBH,KAAzB,CADxB;AAAA,wBAEOrB,WAAW,CAACyB;AAFnB;AAAA;AAAA;AAAA;AAAA,oBADP,gBAKO,QAAC,MAAD;AAAS,cAAA,OAAO,EAAC,UAAjB;AACS,cAAA,OAAO,EAAE,MAAMhC,KAAK,CAAC+B,kBAAN,CAAyBH,KAAzB,CADxB;AAAA,wBAEOrB,WAAW,CAACyB;AAFnB;AAAA;AAAA;AAAA;AAAA,oBAPV;AADL;AAAA;AAAA;AAAA;AAAA,kBAhCJ,eAgDI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AACI,cAAA,QAAQ,MADZ;AAEI,cAAA,KAAK,EAAEhC,KAAK,CAACiC,cAAN,GAAuB,OAAvB,GAAiCjC,KAAK,CAACkC,eAAvC,GAAyD;AAFpE;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhDJ,eAuDI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,mCACI,QAAC,MAAD,CACI;AADJ;AAEI,4BAAW,qBAFf;AAGI,cAAA,YAAY,EAAElC,KAAK,CAACmC,8BAHxB;AAII,cAAA,gBAAgB,EAAElC,eAJtB;AAKI,cAAA,IAAI,EAAE,CALV;AAMI,cAAA,KAAK,MANT;AAOI,cAAA,GAAG,EAAEmB,YAPT;AAQI,cAAA,GAAG,EAAEF,YART;AASI,cAAA,iBAAiB,EAAC,MATtB;AAUI,cAAA,iBAAiB,EAAE,CAACkB,KAAD,EAAQlC,KAAR,KAAkBF,KAAK,CAACqC,kBAAN,CAAyBnC,KAAzB;AAVzC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAvDJ,eAqEI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,mCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBArEJ,eAwEI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,mCACI,QAAC,SAAD;AACI,cAAA,EAAE,EAAC,eADP;AAEI,cAAA,IAAI,EAAC,QAFT;AAGI,cAAA,YAAY,EAAEF,KAAK,CAACsC,oBAHxB;AAII,cAAA,KAAK,EAAEtC,KAAK,CAACsC,oBAJjB;AAKI,cAAA,eAAe,EAAE;AACbC,gBAAAA,MAAM,EAAE;AADK,eALrB;AAQI,cAAA,UAAU,EAAE;AACRC,gBAAAA,UAAU,EAAE;AAAEC,kBAAAA,GAAG,EAAE;AAAP,iBADJ;AAERC,gBAAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAEpD,gBAAgB,CAACqD,MAAjB,CAAwBC;AAAjC;AAFC,eARhB;AAYI,cAAA,OAAO,MAZX;AAaI,cAAA,OAAO,EAAC,QAbZ;AAcI,cAAA,QAAQ,EAAGT,KAAD,IAAWpC,KAAK,CAAC8C,qBAAN,CAA4BV,KAAK,CAACW,MAAN,CAAa7C,KAAzC;AAdzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAxEJ,eA0FI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,mCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBA1FJ,eA6FI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAI,EAAZ;AAAA,mCACI;AAAA,yBAAIF,KAAK,CAACgD,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBA7FJ,eAiGI,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,0BAAhB;AAA2C,YAAA,EAAE,EAAI,EAAjD;AAAA,oCACI,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,UAAhB;AACQ,cAAA,OAAO,EAAE,MAAM;AAAChD,gBAAAA,KAAK,CAACiD,kBAAN,CAAyB1C,WAAW,CAACM,eAArC,EAAsDb,KAAK,CAACsC,oBAA5D,EAAkFtC,KAAK,CAACmC,8BAAxF;AAAwH,eADhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAKKzB,cAAc,EALnB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA+GG,GApJP,MAqJI;AACA,WAAO,IAAP;AACH;AACJ;;KA9JQX,kB;AAiKT,eAAeA,kBAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useSearchParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './App_StickerPageOptions.css';\nimport mergeImages from 'merge-images';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams\n  } from \"react-router-dom\";\n\n// MUI\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Input from '@mui/material/Input';\n\n// Import constants\nimport * as GLOBAL_CONSTANTS from '../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from './LocalConstants'\n\n\n const styles = theme => ({\n    disabledButton: {\n      backgroundColor: theme.palette.secondary || 'red'\n    }\n  });\n\nfunction StickerPageOptions(props){\n    function sliderValueText(value) {\n        // Slider value floating text \n        return `${value} mm`;\n    }\n\n    if (props.stickerData != null){\n        // Variables\n        var materialOption = props.stickerData.material_options[props.currentSelectedMaterialIndex]\n        var styleOption = props.stickerData.material_options[props.currentSelectedMaterialIndex].style_options[props.currentSelectedStyleOptionIndex];\n\n        // Favorite button handler\n        const favoriteButton = ()=>{\n            // Check if item is already a favorite\n            let isFavorite = false;\n            var stickerStyleOptionId = styleOption.style_option_id;\n            if (props.favoriteStickersStyleOptionIds.includes(stickerStyleOptionId)){\n                isFavorite = true;\n            }\n            // Return buttons with different functions and styling if the sticker is in favorites\n            if (isFavorite){\n                return(\n                    <Button variant=\"contained\"\n                            onClick={() => {props.onRemoveStickerFromFavorites(stickerStyleOptionId)}}>\n                        Remove from favorites\n                    </Button>\n                );\n            }\n            else{\n                return(\n                    <Button variant=\"outlined\"\n                            onClick={() => {props.onAddStickerToFavorites(stickerStyleOptionId)}}>\n                        Add to favorites\n                    </Button>\n                );\n            }   \n        }\n\n        // Min and max slide size picker values\n        const sizeSlideMax = styleOption.maximal_side_length_mm;\n        // What would be min for largest side if we set our smallest side to min\n        const sizeSlideMin = Math.ceil(Math.max(styleOption.aspect_ratio, 1/styleOption.aspect_ratio)*styleOption.minimal_side_length_mm);\n\n        return(\n            <div className='stickerPageSideWrapper'>\n                <div className='stickerPageSide rightSideWrapper'>\n                    <Grid container justifyContent=\"left\">\n                        <Grid xs = {12}>\n                            {/* Description */}\n                            <p>{props.stickerData.description}</p>\n                        </Grid>\n                        <Grid xs = {12}>\n                            <h4>Material Options</h4>\n                        </Grid>\n                        \n                        <Grid className='stickerPageButtonWrapper' xs={12}>\n                            {/* Conditional visual render for material picking */}\n                            \n                            {props.stickerData.material_options.map((materialOption, index) => (\n\n                                index == props.currentSelectedMaterialIndex\n                                    ? (<Button  \n                                                variant=\"contained\"\n                                                onClick={() => props.onMaterialOptionClick(index)}\n                                            >{materialOption.material_name}\n                                        </Button>)\n                                    : (<Button  variant=\"outlined\"\n                                                onClick={() => props.onMaterialOptionClick(index)}\n                                            >{materialOption.material_name}\n                                        </Button>)\n                                \n                            ))}\n                        </Grid>\n                        \n                        <Grid xs = {12}>\n                            <h4>Style Options</h4>\n                        </Grid>\n                        \n                        <Grid className='stickerPageButtonWrapper'xs={12}>\n                            {materialOption.style_options.map((styleOption, index)=> (\n                                \n                                index == props.currentSelectedStyleOptionIndex\n                                    ? (<Button  variant=\"contained\"\n                                                onClick={() => props.onStyleOptionClick(index)}\n                                            >{styleOption.style_option_name}\n                                        </Button>)\n                                    : (<Button  variant=\"outlined\" \n                                                onClick={() => props.onStyleOptionClick(index)}\n                                            >{styleOption.style_option_name}\n                                        </Button>)\n \n                            ))}\n                        </Grid>\n                        \n                        <Grid xs = {12}>\n                            <h4>Size: width x height</h4> \n                            <Input \n                                disabled\n                                value={props.stickerWidthmm + \"mm x \" + props.stickerHeightmm + \"mm\"}\n                            />\n                        </Grid>\n                        <Grid xs = {12}>\n                            <Slider\n                                // className=\"sideSlider\"\n                                aria-label=\"Longest side picker\"\n                                defaultValue={props.currentSelectedLongestSidePick}\n                                valueLabelFormat={sliderValueText}\n                                step={1}\n                                marks\n                                min={sizeSlideMin}\n                                max={sizeSlideMax}\n                                valueLabelDisplay=\"auto\"\n                                onChangeCommitted={(event, value) => props.onSizeSliderChange(value)}\n                            />\n                        </Grid>\n                        <Grid xs = {12}>\n                            <h4>Amount</h4>\n                        </Grid>\n                        <Grid xs = {12}>\n                            <TextField\n                                id=\"filled-number\"\n                                type=\"number\"\n                                defaultValue={props.currentStickerAmount}\n                                value={props.currentStickerAmount}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    inputProps: { min: 1 },\n                                    style: { color: GLOBAL_CONSTANTS.COLORS.colorB }\n                                }}\n                                focused\n                                variant=\"filled\"\n                                onChange={(event) => props.onStickerAmountChange(event.target.value)}\n                            />\n                        </Grid>\n                        <Grid xs = {12}>\n                            <h4>Price</h4>\n                        </Grid>\n                        <Grid xs = {12}>\n                            <p>{props.currentStickerPrice} €</p>\n                        </Grid>\n\n                        <Grid className='stickerPageButtonWrapper' xs = {12}>\n                            <Button variant=\"outlined\"\n                                    onClick={() => {props.onAddStickerToCart(styleOption.style_option_id, props.currentStickerAmount, props.currentSelectedLongestSidePick)}}\n                            >Buy</Button>\n                            \n                            {favoriteButton()}\n                        </Grid>\n\n                    </Grid>\n                </div>\n            </div>\n        );}\n    else{\n        return(null);\n    }\n}\n\n\nexport default StickerPageOptions\n"]},"metadata":{},"sourceType":"module"}