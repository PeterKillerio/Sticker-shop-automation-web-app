{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios'; // Import constants\n\nimport * as GLOBAL_CONSTANTS from '../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from './LocalConstants';\n\nclass SetTokensOnVisit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.VerifyAccessTokenSTATE = this.VerifyAccessTokenSTATE.bind(this);\n    this.AskForNewAccessTokenSTATE = this.AskForNewAccessTokenSTATE.bind(this);\n    this.CreateAndSetTempUserSTATE = this.CreateAndSetTempUserSTATE.bind(this);\n  }\n\n  VerifyAccessTokenSTATE() {\n    axios({\n      method: 'post',\n      url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.verify_access_token,\n      headers: {},\n      data: {\n        token: localStorage.getItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token)\n      },\n      validateStatus: () => true\n    }).then(res => {\n      console.log(\"access_token: \" + JSON.stringify(res, null, 2));\n\n      if (res.status != 200 || res.code == \"token_not_valid\") {\n        // Ask for new  access token using refresh token\n        console.log(\"<WARNING:App_SetTokensOnVisit.js>: Access token is invalid. Asking for new access token using refesh token.\");\n        this.AskForNewAccessTokenSTATE();\n      } else {\n        // Access token is valid\n        console.log(\"<INFO:App_SetTokensOnVisit.js> Access token is valid.\");\n      }\n    });\n  }\n\n  AskForNewAccessTokenSTATE() {\n    axios({\n      method: 'post',\n      url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.get_new_access_token,\n      headers: {},\n      data: {\n        refresh: localStorage.getItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token)\n      },\n      validateStatus: () => true\n    }).then(res => {\n      console.log(\"Refresh token: \" + JSON.stringify(res, null, 2));\n\n      if (res.status != 200 || res.code == \"token_not_valid\") {\n        // Refresh token is invalid, set tokens for temp user and refresh\n        console.log(\"<WARNING:App_SetTokensOnVisit.js>: Refresh token is invalid. Removing tokens. Setting temp user and refershing page.\");\n        localStorage.removeItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token);\n        localStorage.removeItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token);\n        this.CreateAndSetTempUserSTATE();\n        window.location.reload(false);\n      } else {\n        localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token, res.data.access);\n        console.log(\"<INFO:App_SetTokensOnVisit.js> Refresh token is valid, received new access token.\");\n      }\n    });\n  }\n\n  CreateAndSetTempUserSTATE() {\n    axios({\n      method: 'get',\n      url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.get_new_temp_user_tokens,\n      headers: {},\n      data: {},\n      validateStatus: () => true\n    }).then(res => {\n      console.log(\"CreateAndSetTempUser: \" + JSON.stringify(res));\n\n      if (res.status == 200) {\n        // Save the tokens to local storage\n        localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token, res.data[0].access);\n        localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token, res.data[0].refresh);\n        localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.is_temp, true);\n        console.log(\"<INFO:App_SetTokensOnVisit.js> Tokens for temp user has been saved.\");\n      } else {\n        // Report error\n        console.log(\"<ERROR:App_SetTokensOnVisit.js>: Wrong status code. Tokens for temp user couldn't be set.\");\n      }\n    });\n  }\n\n  render() {\n    // See 'page visit' diagram/FSM\n    const access = localStorage.getItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token);\n    const refresh = localStorage.getItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token); // Check if user has both access and refersh tokens set\n\n    if (access == null || refresh == null) {\n      // User is missing tokens, set new tokens for temp user\n      console.log(\"<WARNING:App_SetTokensOnVisit.js> User is missing tokens. Setting new tokens for temp user.\");\n      this.CreateAndSetTempUserSTATE();\n    } else {\n      // User has tokens, verifying access token\n      console.log(\"<INFO:App_SetTokensOnVisit.js> User has tokens. Veryfying access token.\");\n      this.VerifyAccessTokenSTATE();\n    }\n\n    return null;\n  }\n\n}\n\nexport default SetTokensOnVisit;","map":{"version":3,"sources":["/home/kio/Documents/Programming/Bachelor_thesis/Bachelor-thesis-application/heroku/src/Components/App_JWT/App_SetTokensOnVisit.js"],"names":["React","ReactDOM","axios","GLOBAL_CONSTANTS","LOCAL_CONSTANTS","SetTokensOnVisit","Component","constructor","props","VerifyAccessTokenSTATE","bind","AskForNewAccessTokenSTATE","CreateAndSetTempUserSTATE","method","url","API_CALL_BASE_URL","API_CALL_URLS","verify_access_token","headers","data","token","localStorage","getItem","LOCAL_STORAGE","access_token","validateStatus","then","res","console","log","JSON","stringify","status","code","get_new_access_token","refresh","refresh_token","removeItem","window","location","reload","setItem","access","get_new_temp_user_tokens","is_temp","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\n// Import constants\nimport * as GLOBAL_CONSTANTS from '../../GlobalConstants';\nimport * as LOCAL_CONSTANTS from './LocalConstants'\n\nclass SetTokensOnVisit extends React.Component{\n    constructor(props) {\n        super(props)\n        this.VerifyAccessTokenSTATE = this.VerifyAccessTokenSTATE.bind(this);\n        this.AskForNewAccessTokenSTATE = this.AskForNewAccessTokenSTATE.bind(this);\n        this.CreateAndSetTempUserSTATE = this.CreateAndSetTempUserSTATE.bind(this);\n    }\n\n    VerifyAccessTokenSTATE(){\n        axios({\n            method: 'post',\n            url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.verify_access_token,\n            headers: {}, \n            data: {\n                token: localStorage.getItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token),\n            },\n            validateStatus: () => true\n        }).then(res => {\n            console.log(\"access_token: \" + JSON.stringify(res, null, 2))\n            if (res.status != 200 || res.code == \"token_not_valid\"){\n                // Ask for new  access token using refresh token\n                console.log(\"<WARNING:App_SetTokensOnVisit.js>: Access token is invalid. Asking for new access token using refesh token.\") \n                this.AskForNewAccessTokenSTATE();\n            }else{\n                // Access token is valid\n                console.log(\"<INFO:App_SetTokensOnVisit.js> Access token is valid.\")\n            }\n        });\n    }\n\n    AskForNewAccessTokenSTATE(){\n        axios({\n            method: 'post',\n            url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.get_new_access_token,\n            headers: {}, \n            data: {\n                refresh: localStorage.getItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token),\n            },\n            validateStatus: () => true\n        }).then(res => {\n            console.log(\"Refresh token: \" + JSON.stringify(res, null, 2))\n            if (res.status != 200 || res.code == \"token_not_valid\"){\n                // Refresh token is invalid, set tokens for temp user and refresh\n                console.log(\"<WARNING:App_SetTokensOnVisit.js>: Refresh token is invalid. Removing tokens. Setting temp user and refershing page.\");\n                localStorage.removeItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token);\n                localStorage.removeItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token);\n                this.CreateAndSetTempUserSTATE();\n                window.location.reload(false);\n            }else{\n                localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token, res.data.access);\n                console.log(\"<INFO:App_SetTokensOnVisit.js> Refresh token is valid, received new access token.\");\n            }\n        });\n    }\n\n    CreateAndSetTempUserSTATE(){\n        axios({\n            method: 'get',\n            url: GLOBAL_CONSTANTS.API_CALL_BASE_URL + LOCAL_CONSTANTS.API_CALL_URLS.get_new_temp_user_tokens,\n            headers: {}, \n            data: {},\n            validateStatus: () => true\n        }).then(res => {\n            console.log(\"CreateAndSetTempUser: \" + JSON.stringify(res))\n            if (res.status == 200){\n                // Save the tokens to local storage\n                localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token, res.data[0].access);\n                localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token, res.data[0].refresh);\n                localStorage.setItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.is_temp, true);\n                console.log(\"<INFO:App_SetTokensOnVisit.js> Tokens for temp user has been saved.\")\n            }else{\n                // Report error\n                console.log(\"<ERROR:App_SetTokensOnVisit.js>: Wrong status code. Tokens for temp user couldn't be set.\")\n            }\n        });\n    }\n\n\n    render(){\n        // See 'page visit' diagram/FSM\n        const access = localStorage.getItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.access_token);\n        const refresh = localStorage.getItem(GLOBAL_CONSTANTS.LOCAL_STORAGE.refresh_token);\n\n        // Check if user has both access and refersh tokens set\n        if ((access == null) || (refresh == null)){ // User is missing tokens, set new tokens for temp user\n            console.log(\"<WARNING:App_SetTokensOnVisit.js> User is missing tokens. Setting new tokens for temp user.\")\n            this.CreateAndSetTempUserSTATE();\n            \n        }else{ // User has tokens, verifying access token\n            console.log(\"<INFO:App_SetTokensOnVisit.js> User has tokens. Veryfying access token.\")\n            this.VerifyAccessTokenSTATE();\n        }\n\n        return(null);\n    }\n}\n\nexport default SetTokensOnVisit"]},"metadata":{},"sourceType":"module"}